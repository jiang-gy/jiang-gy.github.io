<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>书影记录</title>
      <link href="/2024/04/06/sheng-huo/shu-ying-ji-lu/"/>
      <url>/2024/04/06/sheng-huo/shu-ying-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-影视">1 影视</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透搭建教程步骤</title>
      <link href="/2024/04/06/nei-wang-chuan-tou/da-jian-jiao-cheng-bu-zou/"/>
      <url>/2024/04/06/nei-wang-chuan-tou/da-jian-jiao-cheng-bu-zou/</url>
      
        <content type="html"><![CDATA[<h2 id="一-什么是内网穿透">一 什么是内网穿透</h2><p>1内网穿透是我们在进行网络连接时的一种术语，也叫做NAT穿透，即在计算机是局域网内的时候，外网与内网的计算机的节点进行连接时所需要的连接通信，有时候就会出现内网穿透不支的情况。内网穿透的功能就是，当我们在端口映射时设置时，内网穿透起到了地址转换的功能，也就是把公网的地址进行翻译，转成为一种私有的地址，然后再采用路由的方式ADSL的宽带路由器，具有一个动态或者是固定的公网IP，最后ADSL直接在 交换机 上，这样所有的电脑都可以共享上网。内网穿透除了可以实现内网之间机器的网络通信功通之外，还可以解决UDP中出现的数据传输不稳定问题。</p><p>简单说，就是A客户端要访问B客户端，通过一台服务器进行桥接，桥接有两种方式，一种是相互转发，另一个是告诉对方的地址，自己就当一个介绍人的角色。</p><h2 id="二-使用场景有哪些">二 使用场景有哪些</h2><p>首先我们参考一下本人自己画的图</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202403211044654.png" alt="Pasted image 20240319094327"><br>1.小明的电脑和张三家里的电脑分别处在两个不同的局域网内，如果小明想访问张三家电脑的资源，这时就需要运用到内网穿透。借助frp端口映射技术进行内网穿透<br>2.张三在家办公想用家里的电脑，访问公司的电脑资源，这时也可以借助frp工具进行内网穿透进行实现</p><p>总结：在一个可以访问互联网的设备上，访问一个内网中的资源。</p><h2 id="三-frp简介">三 frp简介</h2><p>frp 是一个开源、简洁易用、高性能的内网穿透和反向代理软件，支持 tcp, udp, http, https等协议。<br>frp 是一个可用于内网穿透的高性能的反向代理应用，分为服务端frps和客户端frpc，支持 tcp, udp, http, https 协议。详情可浏览该项目的Github主页: <a href="https://github.com/fatedier/frp/">https://github.com/fatedier/frp/</a></p><h3 id="1-frp的作用">1 frp的作用</h3><p>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。<br>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。<br>利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。</p><h3 id="2-frp工作原理">2 frp工作原理</h3><p>1.服务端运行，监听一个主端口，等待客户端的连接；<br>2.客户端连接到服务端的主端口，同时告诉服务端要监听的端口和转发类型；<br>3.服务端fork新的进程监听客户端指定的端口；<br>4.外网用户连接到客户端指定的端口，服务端通过和客户端的连接将数据转发到客户端；<br>5.客户端进程再将数据转发到本地服务，从而实现内网对外暴露服务的能力。</p><h3 id="3-实验环境的准备">3 实验环境的准备</h3><p>frp实验准备<br>1台vps：vps拥有公网地址(这里我用的阿里云vps)<br>2台linux/windows虚拟机<br>1台可以联网的设备(这里我用的kali)</p><p>拓展：为frp的原理是利用服务端（所准备的VPS）进行转发，因而VPS的速度直接决定了之后连接的质量。</p><p>实验环境需要计算机可以上网，vps拥有公网地址<br>kali192.168.0.55(测试机[能访问baidu即可])<br>linux 192.168.0.208(clint[内网机器])<br>Win7  192.168.0.213(clint[内网机器])<br>vps   your-vps-ip(server[公网机器])</p><pre><code>这里做实验做了两个内网机器供大家学习。两种方法。如果需要访问内网的网页服务，可以购买的域名。</code></pre><h3 id="vps">vps</h3><p>如果是第一次买，推荐需要的朋友选择这两款其中一款(笔者买的是第二款相对多了1核)<br>这是新人专区的特惠(如果直接从阿里云产品里购买里比较贵)</p><p><a href="https://www.aliyun.com/activity/1111/index?spm=5176.21103406.J_6174043250.1.53321719sUISzv&amp;scm=20140722.M_1294.P_3426.MO_466-ID_5976783-CID_21937-ST_3606-V_1">https://www.aliyun.com/activity/1111/index?spm=5176.21103406.J_6174043250.1.53321719sUISzv&amp;scm=20140722.M_1294.P_3426.MO_466-ID_5976783-CID_21937-ST_3606-V_1</a></p><p>这里给大家贴上链接地址。新人活动应该是一直存在，如果链接失效，大家寻找一波一定会有收货。</p><p>域名<br>因为大家基本上是自用，这里给大家推荐一些，适合大众的域名购买<br>如果大家有阿里vps了，可以直接从这里进入(下方我也会贴上链接地址)</p><p>万网链接地址<br><a href="https://wanwang.aliyun.com/domain/?spm=5176.10173289.0.0.2f6b2e77depa6w">https://wanwang.aliyun.com/domain/?spm=5176.10173289.0.0.2f6b2e77depa6w</a><br>点击新用户专享<br>这里大家输入自己的网址信息，查询后可以1元购买未被注册的域名<br>接着大家把购买的域名添加到这里，然后解析设置，按照阿里云的帮助信息填写好。</p><p>域名是需要备案的，这里我们可以以后在弄</p><p>1.frp的使用<br>1.1  serve服务端设置<br>SSH连接到VPS之后运行如下命令查看处理器架构，根据架构下载不同版本的frp arch查看结果，如果是“X86_64“即可选择”amd64”，运行如下命令，根据架构不同，选择相应版本并进行下载。<br>​<br>先下载 frp客户端</p><p>wget <a href="https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gz">https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gz</a></p><p>这里因为是github如果下载慢可以在外面下好上传到vps里<br>然后解压<br>tar -zxvf frp_0.22.0_linux_amd64.tar.gz<br>文件夹改个名，方便使用<br>cp -r frp_0.22.0_linux_amd64 frp<br>把解压出来的文件夹复制到你想要的目录下，为了方便我直接放在用户目录下了，进入该目录<br>cd frp<br>查看一下文件<br>ls -a<br>我们只需要关注如下几个文件</p><pre class="line-numbers language-none"><code class="language-none">frpsfrps.inifrpcfrpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前两个文件（s结尾代表server）分别是服务端程序和服务端配置文件，后两个文件（c结尾代表client）分别是客户端程序和客户端配置文件。<br>因为我们正在配置服务端，可以删除客户端的两个文件<br>rm frpc<br>rm frpc.ini<br>然后修改frps.ini文件<br>vim frps.ini<br>这个文件应有如下格式<br>[common]<br>bind_port = 7000<br>dashboard_port = 7500<br>token = 12345678<br>dashboard_user = admin<br>dashboard_pwd = admin<br>vhost_http_port = 10080<br>vhost_https_port = 10443<br>如果没有必要，端口均可使用默认值，token、user和password项请自行设置。<br>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。<br>“dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。<br>“token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。<br>“dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。<br>“vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。</p><p>可以运行frps的服务端</p><p>./frps -c frps.ini<br>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p><p>2019/01/12 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:7000<br>2019/01/12 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:10080<br>2019/01/12 15:22:39 [I] [service.go:193] https service listen on 0.0.0.0:10443<br>2019/01/12 15:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:7500<br>2019/01/12 15:22:39 [I] [root.go:210] Start frps success</p><p>此时访问 x.x.x.x:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面</p><p>1.2 服务端后台运行<br>我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 nohup命令将其运行在后台。</p><p>nohup ./frps -c frps.ini &amp;<br>输出如下内容即表示正常运行</p><p>nohup: ignoring input and appending output to ‘nohup.out’<br>此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序​jobs<br>在结果中我们可以看到frps正在后台正常运行</p><p>[1]+  Running                 nohup ./frps -c frps.ini &amp;<br>此时访问 x.x.x.x:7500 依然可以打开仪表板界面，至此，服务端即设置完成。<br>这里有个坑，这里设置了后台运行。如果更改了配置需要重新运行这个程序 需要先结束这个进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"frps"</span> $ <span class="token function">ps</span> a<span class="token comment"># 显示所有程序</span>$ <span class="token function">ps</span> u<span class="token comment"># 显示所有程序，不以终端机来区分。</span>$ <span class="token function">ps</span> x<span class="token comment"># 较长，较详细的显示该PID的信息</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token comment"># id号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.3客户端设置<br>这里我运用的linux主机设备，和windows都进行了测试</p><p>frp的客户端就是我们想要真正进行访问的那台设备，<br>大多数情况下应该会是一台Windows主机<br>Linux配置方法类似</p><p>下载链接<br><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a><br>这里的坑，win7下用的和 linux下用的程序不同</p><p>根据客户端设备的情况选择相应的frp程序进行下载<br>用文本编辑器打开frpc.ini，与服务端类似，内容如下。</p><p>[common]<br>server_addr = x.x.x.x<br>server_port = 7000<br>token = 12345678<br>[rdp]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 3389<br>remote_port = 7001<br>[smb]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 445<br>remote_port = 7002<br>这里需要注意<br>[common]<br>server_addr = x.x.x.x 这里是vps地址<br>server_port = 7000 这里是上面写的sever端口<br>token = 12345678 这里是上面server的token<br>其中common字段下的三项即为服务端的设置。</p><p>“server_addr”为服务端IP地址，填入即可。<br>“server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000<br>“token”是你在服务器上设置的连接口令，原样填入即可。</p><p>frp实际使用时，会按照端口号进行对应的转发，原理如下图所示。（侵权请联系删除）</p><p>frpc.ini的rdp、smb字段都是自己定义的规则，自定义端口对应时格式如下。</p><p>“[xxx]”表示一个规则名称，自己定义，便于查询即可。<br>“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。<br>“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。<br>“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。<br>RDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。</p><p>SMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。</p><p>frpc程序不能直接双击运行！<br>配置好frpc.ini文件后</p><p>在cmd命令行 或者powershell运行<br>frpc.exe</p><p>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p><p>2019/01/12 16:14:56 [I] [service.go:205] login to server success, get run id [2b65b4e58a5917ac], server udp port [0]<br>2019/01/12 16:14:56 [I] [proxy_manager.go:136] [2b65b4e58a5917ac] proxy added: [rdp smb]<br>2019/01/12 16:14:56 [I] [control.go:143] [smb] start proxy success<br>2019/01/12 16:14:56 [I] [control.go:143] [rdp] start proxy success</p><p>这里运用kali里的工具可以直接访问vps的7001端口进入远程桌面的Win7</p><p>redesktop you-vps-ip:端口</p><p>1.4结果测试<br>参考链接 -中文frp手册<br><a href="https://www.bookstack.cn/read/frp/spilt.8.spilt.3.README_zh.md">https://www.bookstack.cn/read/frp/spilt.8.spilt.3.README_zh.md</a><br><a href="https://www.cnblogs.com/sanduzxcvbnm/p/8508741.html">https://www.cnblogs.com/sanduzxcvbnm/p/8508741.html</a></p><p>还有诸多方法待实验,例如dns…</p><p>1.4.1 用kali进行测试 3389远程连接是否成功。<br>这里运用了一台可以上网的 kali<br>需要进行测试的是远程连接一台Win7<br>1<br>2<br>这个地址是我们的vps地址，端口为上方设置的端口</p><p>1.4.2 在web端实现 可以访问内网8080端口数据<br>这里利用linux 测试了 web服务<br>1<br>1.通过自定义域名访问部署于内网的 web 服务<br>修改 frps.ini 文件，设置 http 访问端口为 8060：</p><h1>frps.ini</h1><p>[common]<br>bind_port = 7000<br>dashboard_port = 7500<br>token = 12345678<br>dashboard_user = admin<br>dashboard_pwd = admin<br>vhost_http_port = 8060<br>vhost_https_port = 8090</p><p>2.启动 frps；<br>./frps -c ./frps.ini</p><p>3.修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 web 服务对应的端口, 绑定自定义域名 <a href="http://www.yourdomain.com">www.yourdomain.com</a>:</p><h1>frpc.ini</h1><p>[common]<br>server_addr = your-vps-ip<br>server_port = 7000<br>token = 12345678<br>[web]<br>type = http<br>local_port = 8080<br>custom_domains = <a href="http://www.yourdomain.com">www.yourdomain.com</a><br>这里输入的域名 是vps的域名，加上frp的端口就进入到了内网的tomcat</p><p>最后在frp管理界面可以查看详情（例如走的一些流量或者详细信息）</p><p><a href="https://blog.csdn.net/weixin_43213815/article/details/121336968"># 使用frp配置内网(穿透[保姆级教程])</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基本技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出差准备</title>
      <link href="/2024/04/06/sheng-huo/chu-chai-zhun-bei/"/>
      <url>/2024/04/06/sheng-huo/chu-chai-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="出差携带物品">出差携带物品</h2><h3 id="1-背包">1 背包</h3><p>背包一定要带两个，两个包一方面容纳的东西多，另一方面减轻重量<br>两个包，双肩包放电脑及电子产品，手提包放日常衣服及路上吃的<br><strong>1 电子产品</strong><br>手机 ipad 充电宝 数据线（三合一、typeC） 充电头（2个）(一个充电宝、一个手机) 耳机 刮胡刀<br><strong>2 生活洗漱</strong><br>钥匙 衣服 （宾馆提供：牙刷、牙膏、沐浴露、洗发露） 洗面奶 润肤露 水杯 药品（感冒、上火、消炎、发烧）药膏 纸巾 眼镜布<br><strong>3 证件</strong><br>身份证 学生证<br><strong>4 衣服</strong><br>衣服要准备两种情况，一种是天热，一种是天冷；衣服比较轻，不怕带多，只怕到时候没有合适的衣服穿</p><h3 id="2-出游携带物品">2 出游携带物品</h3><p>手机 充电宝 数据线 耳机 房卡 身份证 学生证 零食 水杯 纸巾</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/04/01/sheng-huo/xiao-jiang-de-sheng-huo-ji-lu/"/>
      <url>/2024/04/01/sheng-huo/xiao-jiang-de-sheng-huo-ji-lu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHD求学之旅</title>
      <link href="/2024/03/31/sheng-huo/phd-qiu-xue-zhi-lu/"/>
      <url>/2024/03/31/sheng-huo/phd-qiu-xue-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>在xidian研究生期间主要工作是做项目，科研相关经历较少；然而，在各种机遇促使下，在研究生毕业时选择了读工程博士；自己当年的同学直博已经快毕业时（5年），自己才刚刚入学；心态上也有很多波动。既然选择了这条路，就要不顾一切的走下去，在网上也看到博士的相关博客，也想回顾一下自己的心态变化。<br>之前关注的<a href="https://blog.lingyunyang.com/2019/06/26/why-we-phd/">大神</a>更喜欢将读博看成一种对个人性格与能力的塑造，更偏向于实际解决问题的能力，具体来说包括:</p><ol><li>系统的调研：读博期间总会碰到各种新奇的技术与领域；当面临新的问题时，就需要广泛地收集大量的资料；并且依据分类，对资料进行整理；包括读文献、查文献、读新闻、看相关新闻视频。总之，调研需要博士生具有良好的吸收、总结知识的能力</li><li>理性的分析问题：在充分的调研后，需要针对某一领域进行探索。进步的过程就是解决问题的过程。面对从未见过的新的问题，需要创新的点子，这就离不开对问题的细致分析，从而为解决问题提供理论支撑</li><li>合理地验证想法，巧妙的设计实验：</li><li>争取资源并有效利用资源：硕士三年的经历让我感觉这一点特别重要；实验室的博士生很对但实验室整体的硬件资源、研究方向有限，要想出一些漂亮的成果，少不了物理硬件的支撑；所以哪些资源对实验比较重要必须心中有数，并且及时跟老师提出来<br>此外，其他方面对博士生也很重要：</li><li>写作与汇报能力：这两者缺一不可但是自己在这方面比较薄弱</li><li>抗压能力：感觉全世界博士面临的状况都相同，需要对抗压力和疲惫，面临紧迫的deadline，完成要求比较高的任务</li><li>时间管理与自控：薄弱的要死，但是没有自律力基本上就毕不了业呀</li><li>个人兴趣与耐力：个人兴趣…尽量还是发展一下，目前我还没有</li><li>良好的生活作息：良好的作息对于头发来说至关重要；之前比较喜欢熬夜，但是熬夜比早起的危害打多了。原因可能是熬夜就可以在心理上避免Deadline，因为Deadline是明天，所以明天再做，今天先休息，也就是拖延症。感觉熬夜的时间是自己的。更应该的方式是早起；早起也可以拥有更多的时间，只不过早起可能比较痛苦，不过为了自己的头发，正确养成早起的好习惯；将每天的任务放在早上尽快完成。</li><li>情感孤独：可以通过一些方式排解，看视频好像不太行，不如写点东西，或者去跑步；一定要找到对应的方式<br>要从两方面看待事务，从好的方面，学校对博士提供住宿价格比较便宜，生活成本相对打工来说相对较低。博士在学校里可以接触一些大佬，特别是在会议中，这种机会就业者很难遇到。此外，博士可以自由地去接触一些新的技术，可以按照自己的兴趣而不需要考虑企业中需要的效益成本。<br>自己现在还是小白，希望不断打怪升级，早日成为个小Boss。</li></ol><p>每天需要做的内容：</p><ol><li>关注前沿知识：需要紧跟时代步伐，就是多看一些最新的论文，看看别人是怎么做的；多多阅读会议（最新一年）的学术论文；会议上论文都比较新而且含金量比较高</li><li>arxiv：虽然不经过论文评审，但是牛X的文章基本上都是从这里流出来的，此外，这里面的点子比较新颖，就是时效性高；可以扩充视野。之后可以设置一下邮件通知</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换电脑后生成博客</title>
      <link href="/2024/03/30/bo-ke/geng-huan-dian-nao-hou-sheng-cheng-bo-ke/"/>
      <url>/2024/03/30/bo-ke/geng-huan-dian-nao-hou-sheng-cheng-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="1-通过分支方式复制">1 通过分支方式复制</h2><p>不推荐，因为这样的话仓库变为公有，所有人都能访问<br>作者：直上云霄<br>链接：<a href="https://www.zhihu.com/question/21193762/answer/489124966">https://www.zhihu.com/question/21193762/answer/489124966</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="git分支进行多终端工作">git分支进行多终端工作</h3><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？<br>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h3 id="机制">机制</h3><p>机制是这样的，由于<a href="https://www.zhihu.com/search?q=hexo%20d&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A489124966%7D">hexo d</a>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p><img src="https://picx.zhimg.com/80/v2-32ab30d0d28b916a204c03de4ed0fc4f_720w.webp?source=1def8aca" alt=""></p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和<a href="https://www.zhihu.com/search?q=%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A489124966%7D">配置文件</a>，主题文件，都没有上传到github</p><p><img src="https://pic1.zhimg.com/80/v2-59bb330178a4e010d9818911f789082b_720w.webp?source=1def8aca" alt=""></p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h3 id="上传分支">上传分支</h3><p>首先，先在github上新建一个hexo分支，如图：</p><p><img src="https://picx.zhimg.com/80/v2-ebb3e05632e85ab036663390305caa1c_720w.webp?source=1def8aca" alt=""></p><p>然后在这个仓库的settings中，选择默认分支为<a href="https://www.zhihu.com/search?q=hexo%E5%88%86%E6%94%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A489124966%7D">hexo分支</a>（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img src="https://picx.zhimg.com/80/v2-1899b6219f3787832652813b958b9b3d_720w.webp?source=1def8aca" alt=""></p><p>然后在本地的任意目录下，打开git bash，</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">git clone git@github.com:ZJUFangzh/ZJUFangzh.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的<code>ZJUFangzh.github.io</code>中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果你之前克隆过<a href="https://www.zhihu.com/search?q=theme&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A489124966%7D">theme</a>中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。<br>而后</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">git add .git commit –m "add branch"git push <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><p><img src="https://pic1.zhimg.com/80/v2-a94330ca825f4debde8ce7ceeb8f8394_720w.webp?source=1def8aca" alt=""></p><p>这样就上传完了。</p><h3 id="更换电脑操作"><strong>更换电脑操作</strong></h3><p>一样的，跟之前的环境搭建一样，</p><ul><li>安装git</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo apt-get install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置git全局邮箱和用户名</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">git config --global user.name "yourgithubname"git config --global user.email "yourgithubemail"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>设置ssh key</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">ssh-keygen -t rsa -C "youremail"#生成后填到github和coding上（有coding平台的话）#验证是否成功ssh -T git@github.comssh -T git@git.coding.net #(有coding平台的话)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装<a href="https://www.zhihu.com/search?q=nodejs&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A489124966%7D">nodejs</a></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo apt-get install nodejssudo apt-get install npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装hexo</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">git clone git@………………<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后进入克隆到的文件夹：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cd xxx.github.ionpm installnpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成，部署：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就可以开始写你的新博客了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">hexo new newpage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Tips:</strong></p><ol><li>不要忘了，每次写完最好都把<a href="https://www.zhihu.com/search?q=%E6%BA%90%E6%96%87%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A489124966%7D">源文件</a>上传一下</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">git add .git commit –m "xxxx"git push <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-建立另外的仓库">2 建立另外的仓库</h2><p>将源文件放在一个新的私有仓库中，以后直接在私有仓库中更改内容后，直接在私有仓库</p><pre class="line-numbers language-none"><code class="language-none">hexo g &amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可；不用担心仓库地址不一致问题，在源文件中使用该命令，···会直接部署到相应github网站仓库的域名中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+腾讯云域名</title>
      <link href="/2024/03/30/bo-ke/hexo-teng-xun-yun-yu-ming/"/>
      <url>/2024/03/30/bo-ke/hexo-teng-xun-yun-yu-ming/</url>
      
        <content type="html"><![CDATA[<h3 id="1-购买域名">1 购买域名</h3><p>如果想要免费的域名，可以到下面网址购买：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http%3A%2F%2Fwww.dot.tk%2Fen%2Findex.html%3Flang%3Den&amp;source=article&amp;objectId=1964349">http://www.dot.tk/en/index.html?lang=en</a> (没有尝试过)</p><p>如果有条件，最好到阿里云或者腾讯云等地方<a href="https://cloud.tencent.com/act/pro/domain-sales?from_column=20065&amp;from=20065">购买域名</a>，1元优惠域名还是很多的。</p><p>此处注意实名认证+购买域名后，需要经过一定的时间，域名才会生效。</p><p>本网站在腾讯云购买的域名，因此本文主要以腾讯云为案例介绍</p><h3 id="2-具体步骤">2 具体步骤</h3><p>其余步骤网上资料挺多，这里就不写了。</p><p>腾讯云与阿里云等平台的管理台差不多。此次介绍腾讯云如何进入管理台。</p><p>进入腾讯云的管理控制台-域名与网站-云解析 DNS，进入域名的解析设置。</p><p>后面主要步骤主要参考链接2进行</p><p>注意CNAME中直接填写user+github.io即可，不需要https和多余的//</p><p>主要存在的问题可能是报错：</p><p>Domain does not resolve to the GitHub Pages server. For more information, see</p><p>主要是DNS没有配置好，可以重点看一下参考链接3。配置好的截图应该是这样的。</p><p><img src="https://img-blog.csdnimg.cn/20201110175924108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY0NTI4Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>配置多个IP是为了防止自己网站ip变化。腾讯云最多配置两个，但是也不影响使用</p><p><img src="/2024/03/30/bo-ke/hexo-teng-xun-yun-yu-ming/C:%5CUsers%5CANTL%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240308151249838.png" alt="image-20240308151249838"></p><h3 id="参考链接">参考链接</h3><ol><li><a href="https://cloud.tencent.com/document/product/302/3446#cc909468-2c70-4a0a-b4d0-132a3846762b">腾讯云DNS解析</a></li><li><a href="https://blog.csdn.net/i_do_not_know_you/article/details/105594269">Github Pages 绑定域名遇到的坑</a></li><li><a href="https://blog.csdn.net/weixin_43645287/article/details/109603945?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Domain%27s%20DNS%20record%20could%20not%20&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">github页面绑定域名/Domain‘s DNS record could not be retrieved</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/30/bo-ke/hello-world/"/>
      <url>/2024/03/30/bo-ke/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个github配置同一台电脑上的公钥</title>
      <link href="/2024/03/30/git/liang-ge-github-pei-zhi-tong-yi-tai-dian-nao-shang-de-gong-yao/"/>
      <url>/2024/03/30/git/liang-ge-github-pei-zhi-tong-yi-tai-dian-nao-shang-de-gong-yao/</url>
      
        <content type="html"><![CDATA[<h5 id="一、另外生成一份SSH-key">一、另外生成一份SSH key</h5><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-f</span> /c/Users/Administrator/.ssh/id_rsa_second <span class="token parameter variable">-C</span> <span class="token string">"xxxxx@163.com"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成成功会在.ssh目录下看到多出两个文件：id_rsa_second和id_rsa_second.pub，同样我们把新生成的公钥添加到gitLab新账号上。</p><h5 id="二：添加密钥到-SSH-Agent">二：添加密钥到 SSH Agent</h5><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-agent <span class="token function">bash</span>ssh-add /c/Users/Administrator/.ssh/id_rsa_second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="三、配置config文件">三、配置config文件</h5><p>.ssh目录下默认是没有config文件的，我们手动在.ssh目录下创建一个config文件（不需要后缀）。然后用编辑器打开config文件，给新账号单独配置一个Host，Host要取一个别名，每个Host主要配置HostName和IdentityFile即可。如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Host gitLab<span class="token operator">-</span>secondHostName gitLab<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>检查是否配置成功：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ssh <span class="token operator">-</span>T git<span class="token variable">@gitLab</span><span class="token operator">-</span><span class="token keyword">second</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到自己的昵称则表示配置成功，如：Hi (you name)! You’ve successfully authenticated, but <a href="http://GITEE.COM">GITEE.COM</a> does not provide shell access.<br>配置完成后，在连接非默认帐号的gitLab仓库时，远程库的地址要对应地做一些修改，比如现在克隆second帐号下的一个仓库xxxxx：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@gitLab-second:name/xxxxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实此时就可以使用了，但是网上还有其他配置</p><h5 id="四、取消全局的用户名和邮箱配置">四、取消全局的用户名和邮箱配置</h5><p>因为一台电脑上配置了多个git账号，所以就不能再配置全局的用户名和邮箱了，而是在不同的仓库下，配置相应的局部用户名和邮箱即可。 打开 git bash，输入以下命令取消全局配置：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">css复制代码git config --global --unset user.namegit config --global --unset user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="五、为某个仓库配置用户名和邮箱">五、为某个仓库配置用户名和邮箱</h5><p>进入某个仓库根目录，打开 git bash,输入以下命令为其配置局部用户名和邮箱：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">git config user<span class="token punctuation">.</span>name <span class="token string">"xx"</span>git config user<span class="token punctuation">.</span>email <span class="token string">"xx@xx.com"</span>git config <span class="token comment">--list   （查看配置）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://juejin.cn/post/6992519940074897444">https://juejin.cn/post/6992519940074897444</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows相关</title>
      <link href="/2024/03/30/windows-xiang-guan/"/>
      <url>/2024/03/30/windows-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-调整鼠标颜色">1 调整鼠标颜色</h2><p><a href="https://support.hp.com/cn-zh/document/c00217076">原文链接</a></p><ol><li><p>打开【开始菜单】- 点击【设置】</p><p><img src="https://support.hp.com/wcc-assets/document/images/642/c06449920.png" alt=""></p></li><li><p>打开【轻松使用】标签</p><p><img src="https://support.hp.com/wcc-assets/document/images/515/c06449921.png" alt=""></p></li><li><p>选择【光标与指针】- 可以通过拖动滚动条来更改鼠标指针大小</p><p><img src="https://support.hp.com/wcc-assets/document/images/388/c06449922.png" alt=""></p></li><li><p>可以直接选择鼠标指针颜色，或者自定义颜色</p><p><img src="https://support.hp.com/wcc-assets/document/images/261/c06449923.png" alt=""></p></li><li><p>还可以更改输入框中光标的粗细，拖动滚动条即可</p><p><img src="https://support.hp.com/wcc-assets/document/images/134/c06449924.png" alt=""></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery主题优化</title>
      <link href="/2024/03/30/bo-ke/matery-zhu-ti-you-hua/"/>
      <url>/2024/03/30/bo-ke/matery-zhu-ti-you-hua/</url>
      
        <content type="html"><![CDATA[<p>主要参考博客<a href="https://fenghen0918.github.io/2020/10/22/hexo/hexo-bo-ke-you-hua-pian-matery-yi/#toc-heading-1">魔改记录</a>，大佬博客总结得很详细，但是由于大佬blog是较早之前写的，有些功能仍然有些不适用，在配置过程中踩了一些坑，因此，此处记录一下过程（有用部分直接就cv了），推荐直接访问原博客。</p><h2 id="1-基本页面功能">1 基本页面功能</h2><p>此部分也可以参考原本的<code>read.me</code>,功能实现基本相似</p><h3 id="1-1-增加页面">1.1 增加页面</h3><blockquote><p>增加页面的步骤都基本相同，创建<code>tags</code>标签页、<code>categories</code>分类页，<code>about</code>关于我页、&nbsp;<code>contact</code>留言板页、<code>friends</code>友情链接页、均可以使用这个步骤</p></blockquote><ol><li><p>如果在你的博客 source 目录下还没有，就输入以下命令（站点目录打开的命令行）来新建一个：</p> <pre class="line-numbers language-none"><code class="language-none">hexo new page "页面的英文"     # 如：hexo new page "tags"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</p> <pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2020-06-19 16:23:38type: "页面的英文"    # 如：type: "tags"layout: "页面的英文" # 如：layout: "tags"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于&nbsp;<code>contact</code>留言板页：</p><p>留言板功能依赖于第三方评论系统，激活评论系统才有效果，下面会有介绍</p><p>关于<code>friends</code>友情链接页：</p><p>如果你想增加内容，在你的博客 source 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，输入以下内容：</p></blockquote> <pre class="line-numbers language-none"><code class="language-none">[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-2-菜单导航配置">1.2 菜单导航配置</h3><blockquote><p>关于导航的配置都在主题配置文件中</p></blockquote><h4 id="1-2-1-配置基本菜单导航的名称、路径url和图标icon">1.2.1 配置基本菜单导航的名称、路径url和图标icon</h4><ul><li>导航名称可以设置成中文/英文</li><li>图标icon可以更换，具体属性值可以在<a href="https://fontawesome.com/icons">fontawesome</a>中查找</li></ul><pre class="line-numbers language-none"><code class="language-none">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  友人帐: #可以使用中文，也可以在对应的md中设置title:友人帐    url: /friends    icon: fas fa-address-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-二级菜单配置方法">1.2.2 二级菜单配置方法</h4><ol><li>在需要添加二级菜单的一级菜单下添加children关键字(如:爱好菜单下添加children)，一级菜单不需要增加url属性</li><li>创建二级页面，步骤与创建页面步骤相同，编辑md时不需要<code>layout</code>属性 <pre class="line-numbers language-none"><code class="language-none">---title: 追番date: 2020-06-15 15:19:35type: "bangumis"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>给二级菜单增加名称name,路径url和图标icon</li><li>注意每个二级菜单模块前要加&nbsp;<code>-</code></li><li>二级菜单要缩进到一级菜单内</li></ol><pre class="line-numbers language-none"><code class="language-none">爱好:    icon: fas fa-bicycle    children:      - name: 追番        url: /bangumis        icon: fas fa-play-circle      - name: 音乐        url: /musics        icon: fas fa-music<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="以网易云音乐为例">以网易云音乐为例</h4><blockquote><p>这个就非常简单了，不需要安装任何插件，只需要创建新页面，配置二级导航即可</p></blockquote><ol><li><p>创建音乐页面</p><p>输入命令</p> <pre class="line-numbers language-none"><code class="language-none">hexo new page musics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到<code>source/musics/index.md</code>这个文件，修改这个文件，添加&nbsp;<code>type: "music"</code></p> <pre class="line-numbers language-none"><code class="language-none">---title: 音乐！音乐！date: 2020-06-16 14:45:30type: 'music'---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在index.md文件中增加以下内容</p> <pre class="line-numbers language-none"><code class="language-none">&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=520 src="//music.163.com/outchain/player?type=0&amp;id=2817562565&amp;auto=1&amp;height=430"&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>第二行的id的那串数字，需要改成你想要的歌单id</p><p>查看自己id的方式：</p><ol><li><p>点击网易云音乐软件，找到想设置的歌单→分享→复制链接</p></li><li><p><a href="https://music.163.com/playlist?id=531558923&amp;userid=375531677">https://music.163.com/playlist?id=531558923&amp;userid=375531677</a></p></li><li><p>id则是你想要的id，<strong>不是</strong>后面的userid</p></li></ol></blockquote></li><li><p>配置音乐页面为二级导航栏</p><p>参考上边的二级导航栏配置方式</p></li></ol><blockquote><p>注意：此处界面最多显示十条歌曲，因此还存在问题</p></blockquote><h3 id="1-3-增加emoji支持">1.3 增加emoji支持</h3><p>😄&nbsp;使你markdown博客里的emoji表情跳动起来</p><ol><li><p>安装插件</p> <pre class="line-numbers language-none"><code class="language-none">npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p> <pre class="line-numbers language-none"><code class="language-none">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新部署即可查看</p></li></ol><blockquote><p>小坑：</p><p>在配置支持前发布的文章中的表情并没有获得支持，并且连表情都不会显示，所以最好在配置之后再输入表情进行测试</p></blockquote><h3 id="1-4-新建文章自动打开本地Markdown编辑器">1.4 新建文章自动打开本地Markdown编辑器</h3><blockquote><p>写新文章时，需要控制台执行hexo new “文章名字”生成一篇新文章，但需要手动打开，挺麻烦，我们可以设置在生成之后自动打开</p></blockquote><p>在站点根目录下新建scripts目录，然后在新建<code>auto_open.js</code>，在文件填入一下内容：</p><pre class="line-numbers language-none"><code class="language-none">var spawn = require('child_process').exec;// Hexo 2.x 用户复制这段//hexo.on('new', function(path){  //spawn('start  "markdown编辑器绝对路径.exe" ' + path);//});// Hexo 3 用户复制这段hexo.on('new', function(data){  spawn('start  "D:\Program Files\Typora\Typora.exe" ' + data.path);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中”D:\Program Files\Typora\Typora.exe”是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行<code>hexo cl &amp;&amp; hexo g -d</code>，部署到GitHub即可，以后在发布文章就会自动打开编辑器。</p></blockquote><h3 id="1-5-代码高亮">1.5 代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，用一个插件来替换它</p><ol><li><p>安装插件</p> <pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 Hexo 站点配置文件 _config.yml 中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p> <pre class="line-numbers language-none"><code class="language-none">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-6-添加友链">1.6 添加友链</h3><p>在<code>\source\_data\friends.json</code>添加json字符串</p><p>欢迎小伙伴分享友链呀~</p><p><strong>Matery版：</strong></p><p>交换友链还请评论此格式哦~🌿</p><p>json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/medias/logo.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小苏の万事屋"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"一个不是只会写业务代码的后端攻城狮！"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://sulog.top/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去关照"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加CSDN,此处参考<a href="https://marmalade.vip/Materysettings1.html"># Hexo-Matery主题细致美化(上)</a></p><pre class="line-numbers language-none"><code class="language-none">{&nbsp; &nbsp; "avatar": "https://cdn.jsdelivr.net/gh/guixinchn/image/blog/csdn.png",&nbsp; &nbsp; "name": "Blog",&nbsp; &nbsp; "introduction": "CSDN社区",&nbsp; &nbsp; "url": "https://blog.csdn.net/m0_49448331?type=blog",&nbsp; &nbsp; "title": "CSDN"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-搜索功能">1.7 搜索功能</h3><p>实现文章内容搜索</p><ol><li><p>安装插件</p> <pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项：</p> <pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-8-中文链接转拼音">1.8 中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的文章链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><ol><li><p>安装插件</p> <pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 Hexo 站点配置文件 _config.yml 中，新增以下的配置项：</p> <pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: '-' # default: '-'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-9-文章字数统计插件">1.9 文章字数统计插件</h3><p>用于在文章中显示文章字数、阅读时长信息</p><ol><li><p>安装插件</p> <pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<strong>主题</strong>配置文件_config.yml 文件中，<strong>激活</strong>以下配置项即可：</p> <pre class="line-numbers language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-10-配置音乐播放器">1.10 配置音乐播放器</h3><p>想支持音乐播放，在<strong>主题</strong>的 _config.yml 配置文件中激活music配置即可：</p><pre class="line-numbers language-none"><code class="language-none"># 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: true    show: 听听音乐  autoHide: false    # hide automaticaly  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 411680085     #require    song id / playlist id / album id / search keyword  fixed: true       # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false  # 列表默认折叠  hideLrc: true     # 隐藏歌词<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性介绍：</p><p>server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）</p><p>type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。</p></blockquote><blockquote><p>小坑：</p><p>matery主题不支持pjax异步机制，在切换页面时音乐也会切换，不会继续一首歌播放</p><p>所以这个功能比较鸡肋，在于自己取舍</p></blockquote><h3 id="1-11-关于我页面添加个人简历">1.11 关于我页面添加个人简历</h3><p>打开theme/matery/layout/about.ejs文件，大约在13行。有一个<code>card</code>标签，找出其对应结尾的标签，大约在61行左右，然后在下面新增如下代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="card"&gt;     &lt;div class="card-content"&gt;         &lt;div class="card-content article-card-content"&gt;             &lt;div class="title center-align" data-aos="zoom-in-up"&gt;                 &lt;i class="fa fa-address-book"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('个人简历') %&gt;              &lt;/div&gt;                 &lt;div id="articleContent" data-aos="fade-up"&gt;                     &lt;%- page.content %&gt;                 &lt;/div&gt;           &lt;/div&gt;      &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后/source/about/index.md下面写上你的简历了（就像写博客一样）。</p><blockquote><p>中文显示为？？？<br>这是因为<strong>站点配置文件</strong>没有使用<code>utf-8</code>编码造成的，所以在<strong>站点配置文件</strong><code>_config.yml</code>中写中文网站名，然后把<strong>站点配置文件</strong>保存为<code>utf-8格式</code>。包括md文件，出现该问题，也要用同样的方式解决。</p></blockquote><h3 id="1-12-配置404错误页面">1.12 配置404错误页面</h3><p>站点根目录下的source文件夹下新建404.md文件，里面内容如下：</p><pre class="line-numbers language-none"><code class="language-none">---title: 404date: 2020-6-18 16:41:10type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面了"---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题文件夹的layout目录下新建404.ejs文件，添加内容如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;style type="text/css"&gt;    /* don't remove. */    .about-cover {        height: 90.2vh;    }&lt;/style&gt;&lt;div class="bg-cover pd-header about-cover"&gt;    &lt;div class="container"&gt;        &lt;div class="row"&gt;            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2"&gt;                &lt;div class="brand"&gt;                    &lt;div class="title center-align"&gt;                        404                    &lt;/div&gt;                    &lt;div class="description center-align"&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $('.bg-cover').css('background-image', 'url(https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.1/source/medias/banner/' + new Date().getDay() + '.jpg)');&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后部署，再看看效果即可<a href="http://localhost:4000/404/">http://localhost:4000/404/</a></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-6.png" alt="image-20200619203902808"></p><h3 id="1-13-不蒜子统计">1.13 不蒜子统计</h3><h4 id="1-13-1-底部总浏览量和访问人数总是隐藏">1.13.1 底部总浏览量和访问人数总是隐藏</h4><p><a href="https://jingeg.gitee.io/2020/03/04/hexozhongmateryzhutidegexinghuadingzhi/#toc-heading-10">原链接网页</a><br>有时候请求busuanzi数据比较慢，然后浏览量和访问人数就会隐藏，可能是默认的，在matery.css中增加以下代码可以让它一直显示</p><pre class="line-numbers language-none"><code class="language-none">   #busuanzi_container_site_pv,   #busuanzi_value_site_pv,   #busuanzi_container_site_uv{      display: inline !important;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终找到了一位大佬的解决方案：<a href="https://blog.17lai.site/posts/84b4059a/#%E4%B8%8D%E8%92%9C%E5%AD%90-busuanzi-%E6%96%87%E7%AB%A0%E8%AE%A1%E6%95%B0%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98">基于Hexo的matery主题搭建博客常见问题篇6 | 夜法之书 (17lai.site)</a></p><h4 id="1-13-2-不蒜子-busuanzi-文章计数出错问题">1.13.2 不蒜子 (busuanzi) 文章计数出错问题</h4><p>参考博客<a href="https://www.cnblogs.com/ranxi169/p/16715360.html">原网页</a><br>还是不能显示数字。<br>最终找到了一位大佬的解决方案：<a href="https://blog.17lai.site/posts/84b4059a/#%E4%B8%8D%E8%92%9C%E5%AD%90-busuanzi-%E6%96%87%E7%AB%A0%E8%AE%A1%E6%95%B0%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98">基于Hexo的matery主题搭建博客常见问题篇6 | 夜法之书 (17lai.site)</a>出现这个原因，和 Chrome 85 版本 Referrer Policy 更改有关。什么是 Referrer，简单理解，就是请求 Web 服务器时，可以在 HTTP Request 的请求头 (header) 中加上当前页面的 URL，例如我们在浏览某个博客页面，需要加载一些图片，从服务器请求这些图片时，referrer 就是当前的博客页面 URL。从这里也可以看出，referrer 可能会暴露请求来源的某些信息或者隐私，有一定的隐私或安全风险。之前版本的 Chrome 浏览器，如果网站没有指定自己的 Referrer Policy，那么 Chrome 默认 policy 是 no-referrer-when-downgrade，在 Chrome 85 版本中，为了保护用户的隐私，默认的 Referrer Policy 则变成了 strict-origin-when-cross-origin。</p><ul><li>no-referrer-when-downgrade: 当两个网站的 http 协议安全等级相当，或者目的网站安全协议等级高于当前网站(HTTP –&gt; HTTP, HTTPS –&gt; HTTPS, HTTP –&gt; HTTPS)， referer 将会包含源网站的域名，路径，查询字符串；如果目的网站安全协议等级低于源网站 (HTTPS –&gt; HTTP)，将不会发送这些信息。</li><li>strict-origin-when-cross-origin： 只有当做同一域名请求时 (源网址和目标网址是同一域名），才发送域名，路径和请求字符串，当两个网站安全协议相当时，发送源网站的域名(没有具体路径信息和查询字符串)，如果目标网站安全协议等级低于源网站，不发送 header 信息。</li></ul><p>不蒜子统计博客文章访问量就是通过 referer 来计算的，通过上面的分析，如果 Referrer Policy 是 strict-origin-when-cross-origin，不蒜子接收到的只有博客的域名，没有文章的具体路径，所以具体某个文章的 PV 统计会出现错误。</p><p>修复方法：</p><p>在主题文件夹下/layout/_partial/head.ejs中添加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer-when-downgrade<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-13-3-增加建站时间">1.13.3 增加建站时间</h4><p><a href="https://blog.bluesky01st.eu.org/posts/d76019f8.html">源网页</a></p><p>在<code>themes/matery/_config.yml</code>找到以下内容(42行)：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Website start time.</span><span class="token comment"># 站点运行开始时间.</span><span class="token key atrule">time</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">year</span><span class="token punctuation">:</span>  <span class="token comment"># 年份</span>  <span class="token key atrule">month</span><span class="token punctuation">:</span>  <span class="token comment"># 月份</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span>  <span class="token comment"># 日期</span>  <span class="token key atrule">hour</span><span class="token punctuation">:</span>  <span class="token comment"># 小时</span>  <span class="token key atrule">minute</span><span class="token punctuation">:</span>  <span class="token comment"># 分钟</span>  <span class="token key atrule">second</span><span class="token punctuation">:</span>  <span class="token comment"># 秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改为你的建站时间即可</p><h3 id="1-13-写作设置">1.13 写作设置</h3><p>目录中不显示一级标题，查阅了大部分网页发现一般有如下建议：</p><blockquote><p>建议正文的标题从二级标题开始，支持从一级标题开始只是为了兼容，之所以这样建议，是因为文章 title 是一级标题，正文如果需要标题，就往下一级从二级开始，这样很合理，不要跳级。<br>注意：之后的markdown也要养成二级标题的习惯</p></blockquote><h2 id="2-视觉美化">2. 视觉美化</h2><h3 id="2-1-修改主题颜色及导航透明效果">2.1 修改主题颜色及导航透明效果</h3><p>在主题文件的 /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色、透明效果. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);    opacity: 0.8;  //透明效果 值范围 0~1，看情况自己修改}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-修改主题页面">2.2 修改主题页面</h3><h4 id="2-2-1-修改-banner-图和文章特色图">2.2.1 修改 banner 图和文章特色图</h4><p>你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。</p><p>如果想改为每小时或者每分钟切换banner图的话，可以在 /layout/_partial/bg-cover-content.ejs 文件的&nbsp;<code>bannerUrl</code>&nbsp;代码中，将getDay()改为getHours()或者getMinutes()即可，当然需要再上述文件夹中有足够多的图片，如换成每小时就需要24张图。</p><pre class="line-numbers language-none"><code class="language-none">var bannerUrl = "&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/medias/banner/') %&gt;" + new Date().getDay() + '.jpg';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文章特色图显示<br>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。<br>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改,增加或者减少图片的名称。</p><pre class="line-numbers language-none"><code class="language-none">&nbsp;%% themes\materylayout\_partial\index-cover.ejs %%&nbsp;var featureImage = featureImages[Math.abs(hashCode(post.title) % imgCount)];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">themes\materyJgy\_config.ymlfeatureImages:XXXX.XXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202403271252109.png" alt=""><br>如果图片不显示的话，一定要仔细检查图片名字是否和<code>_config.yml</code>保持一致，特别注意图片的后缀是<code>jpg</code>还是<code>png</code></p><h4 id="2-2-2-整体背景修改">2.2.2 整体背景修改</h4><p>在<code>themes\Matery\source\css\matery.css</code>，ctrl+F快捷键查找<code>body</code><br>修改样式如下：<br>css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token comment">/* background-color: #eaeaea; */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>60deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 165<span class="token punctuation">,</span> 150<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span> 5%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 228<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">)</span> 0% 0% / cover<span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://ae01.alicdn.com/kf/H21b5f6b8496141a1979a33666e1074d9x.jpg"</span><span class="token punctuation">)</span></span> 0px 0px<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>     <span class="token comment">/* 字体颜色*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> #7F95D1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-导航条颜色">2.2.3 导航条颜色</h4><p>修改<code>themes\Matery\source\css\matery.css</code>样式</p><p>快捷键ctrl+F查找定位到<code>#4cbf30</code>（浅绿色）和<code>#0f9d58</code>（深绿色）还有首页字体颜色，</p><p>然后将其修改为你喜欢的颜色</p><blockquote><p>注意：不知有一处需要替换，建议将所有的都浅绿色和深绿色都替换成你的颜色</p><p>遇到的坑：</p><p>忘记修改这个，导致导航条颜色没有修改成功</p><p>css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #6DD0F2 0%<span class="token punctuation">,</span> #F59ABE 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span>  <span class="token comment">/*透明效果 值范围 0~1，看情况自己修改*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2-4-滚动条美化">2.2.4 滚动条美化</h4><p>此处为优化页面中所有的滚动条，包括代码横向的滚动条和页面纵向的滚动条</p><p>在<code>themes\Matery\source\css\matery.css</code></p><p>样式添加如下：</p><p>css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 滚动条 */</span><span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #FF2A68<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.4<span class="token punctuation">)</span> 25%<span class="token punctuation">,</span>transparent 25%<span class="token punctuation">,</span>transparent 50%<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.4<span class="token punctuation">)</span> 50%<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.4<span class="token punctuation">)</span> 75%<span class="token punctuation">,</span>transparent 75%<span class="token punctuation">,</span>transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ffcacaff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-5-目录透明化">2.2.5 目录透明化</h4><p>增加样式在<code>themes\Matery\layout\_partial\post-detail-toc.ejs</code></p><p><strong>修改</strong>内容如下：</p><p>ejs</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">.toc-widget {width: 345px;padding-left: 20px;background-color: rgb(255, 255, 255,0.7);border-radius: 10px;box-shadow: 0 10px 35px 2px rgba(0, 0, 0, .15), 0 5px 15px rgba(0, 0, 0, .07), 0 2px 5px -5px rgba(0, 0, 0, .1) !important;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-修改页脚、跳动红心">2.3 修改页脚、跳动红心</h3><h4 id="2-3-1-跳动红心">2.3.1 跳动红心</h4><ol><li><p>在文件的最下面加上以下代码</p> <pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/HCLonely/images@master/others/heartbeat.min.css"&gt;&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将需要加跳动红心的地方加上以下代码</p> <pre class="line-numbers language-none"><code class="language-none">&lt;i id="heartbeat" class="fa fas fa-heartbeat"&gt;&lt;/i&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="2-3-2-修改页脚">2.3.2 修改页脚</h4><p>修改的地方<code>themes\matery\layout\_partial/footer.ejs</code>文件中，包括站点、使用的主题、访问量等。</p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-14.png" alt="image-20200619215304130"></p><p>我的配置：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="col s12 m8 l8 copy-right"&gt;    &amp;copy;&lt;span id="year"&gt;&lt;%- theme.time.year %&gt;&lt;/span&gt;-&lt;span id="year"&gt;&lt;%- theme.time.year +1 %&gt;&lt;/span&gt;&amp;nbsp;&lt;i id="heartbeat" class="fa fas fa-heartbeat"&gt;&lt;/i&gt;&amp;nbsp;    &lt;a href="&lt;%- url_for('/about') %&gt;" target="_blank"&gt;&lt;%- config.author %&gt;&lt;/a&gt;    &lt;br&gt;快乐每一天！    &lt;br&gt;&lt;% if (theme.postInfo.totalCount) { %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-修改打赏二维码">2.4 修改打赏二维码</h3><p>在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="2-5-修改社交链接">2.5 修改社交链接</h3><p>在主题配置文件_config.yml中，搜索<code>socialLink</code>，不配置值代表不启用，这是我的配置：</p><pre class="line-numbers language-none"><code class="language-none"># 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  https://github.com/fenghen0918  email: 443175565@qq.com  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: 443175565  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss:  # true、false  weixin: https://cdn.jsdelivr.net/gh/fenghen0918/fenghen0918.github.io/medias/imgs/wechat.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的weixin我是用的图片链接，会跳转到一个新的标签页，之后还需要修改ejs文件，文件在主题目录下的layout文件夹下的_partial文件夹，修改social-link.ejs，添加相关的配置，我个人添加的配置如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.weixin) { %&gt;    &lt;a href="&lt;%= theme.socialLink.weixin %&gt;" class="tooltipped" target="_blank" data-tooltip="微信联系我: " data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-weixin"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;&lt;%&nbsp;if&nbsp;(theme.socialLink.github)&nbsp;{&nbsp;%&gt;&lt;a&nbsp;href="&lt;%=&nbsp;theme.socialLink.github %&gt;"&nbsp;class="tooltipped"&nbsp;target="_blank"&nbsp;data-tooltip="访问我的GitHub"&nbsp;data-position="top"&nbsp;data-delay="50"&gt;&nbsp;&lt;i&nbsp;class="fab fa-github"&gt;&lt;/i&gt;&nbsp;&lt;/a&gt; &lt;%&nbsp;}&nbsp;%&gt; &lt;% if (theme.socialLink.csdn) { %&gt;&nbsp; &nbsp; &lt;a href="&lt;%= theme.socialLink.csdn %&gt;" class="tooltipped" target="_blank" data-tooltip="关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;" data-position="top" data-delay="50"&gt;&nbsp; &nbsp; &lt;i class="fab fa-csdn"&gt;C&lt;/i&gt;&nbsp; &nbsp; &lt;/a&gt;&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-标题">2.6 标题</h3><h4 id="2-6-1-动态标题">2.6.1 动态标题</h4><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-15.png" alt="image-20200619221831563"></p><p><img src="https://sulog.oss-cn-hangzhou.aliyuncs.com/matery2-16.png" alt="image-20200619222009100"></p><p>在主题文件下的<code>themes\matery\source\js</code>下新建<code>FunnyTitle.js</code>，增加以下代码</p><pre class="line-numbers language-none"><code class="language-none">var OriginTitle = document.title;var titleTime;document.addEventListener('visibilitychange', function () {    if (document.hidden) {        $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/Yafine/cdn@2.2/source/favicon.png");        document.title = 'ヽ(●-`Д´-)ノ你要玩捉迷藏嘛';        clearTimeout(titleTime);    }    else {        $('[rel="icon"]').attr('href', "https://cdn.jsdelivr.net/gh/Yafine/cdn@2.2/source/favicon.png");        document.title = 'ヾ(Ő∀Ő3)ノ好哦！' + OriginTitle;        titleTime = setTimeout(function () {            document.title = OriginTitle;        }, 2000);    }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>themes/matery/layout/layout.ejs</code>文件中添加如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/javascript"&gt;      var OriginTitile=document.title,st;      document.addEventListener("visibilitychange",function(){          document.hidden?(document.title="ヽ(●-`Д´-)ノ你要玩捉迷藏嘛",clearTimeout(st)):(document.title="(Ő∀Ő3)ノ好哦！",st=setTimeout(function(){document.title=OriginTitile},3e3))      })  &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-2-标题溢出">2.6.2 标题溢出</h4><p><a href="https://jingeg.gitee.io/2020/03/04/hexozhongmateryzhutidegexinghuadingzhi/#toc-heading-10">原网页</a><br>用手机浏览网站时网站名称稍微长点就会从导航栏掉下来，让人看着很不舒服。我选择用手机浏览时不显示logo图片只显示文字</p><p><img src="https://jingeg.gitee.io/images/matery5.png" alt="网站名称"></p><p>解决办法：在matery.css中添加以下代码。不懂css的注意放置的位置(第六行后面)</p><pre class="line-numbers language-none"><code class="language-none">header .brand-logo .logo-img{     display: none; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-7-修改全局字体">2.7 修改全局字体</h3><h4 id="2-7-1-修改全局字体样式">2.7.1 修改全局字体样式</h4><ol><li><p>在根目录下的&nbsp;<code>source</code>&nbsp;文件夹内创建一个名为&nbsp;<code>font</code>&nbsp;的文件夹，即文件夹路径为&nbsp;<code>/source/font/</code>&nbsp;，用来统一存放你要用到的字体。</p></li><li><p>将你要用到的字体放入上述创建的文件夹内，字体名称最好为英文，如 /source/font/myFont.ttf</p><blockquote><p>字体下载推荐：<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></p></blockquote></li><li><p>找到&nbsp;<code>/themes/matery/source/css/</code>下的 my.css 文件，填入下面的代码：</p> <pre class="line-numbers language-none"><code class="language-none">@font-face{    font-family: 'myFont';    src: url('../font/myFont.ttf');}body{    font-family: 'myFont';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面的 myFont 改成你自己的字体名称即可<br>修改字体的坑：</p></li></ol><blockquote><p>上传字体后网页不显示，找了很多方法，后来发现是字体文件出了问题<br>方法：注意此处为<strong>所有用户安装</strong>，而不是简单的安装<br><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202403241501409.png" alt=""></p></blockquote><p>当一个字体虽然安装但不显示，可以尝试搜索其他的字体文件，可能该文件只适合于软件显示而不适合浏览器网页<br>所以更好的方式是通过这种在线配置的方法<a href="https://blog.csdn.net/rsj1994/article/details/53037881#:~:text=%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%94%A8CSS%E7%9A%84font-family%E5%B1%9E%E6%80%A7%E6%9D%A5%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%EF%BC%8C%E7%84%B6%E8%80%8C%E5%AE%9A%E4%B9%89%E7%9A%84%E5%AD%97%E4%BD%93%E5%9C%A8%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%8A%E8%83%BD%E5%90%A6%E6%AD%A3%E7%A1%AE%E5%91%88%E7%8E%B0%E5%88%99%E8%A6%81%E7%9C%8B%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%B5%E8%84%91%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E4%BA%86%E8%AF%A5%E5%AD%97%E4%BD%93%E3%80%82,%E6%88%91%E4%BB%AC%E7%BB%8F%E5%B8%B8%E8%83%BD%E7%9C%8B%E5%88%B0%E5%9B%BD%E5%A4%96%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8%E4%BA%86%E9%9D%9E%E5%B8%B8%E6%BC%82%E4%BA%AE%E7%9A%84%E5%AD%97%E4%BD%93%EF%BC%8C%E8%80%8C%E8%BF%99%E4%BA%9B%E5%AD%97%E4%BD%93%E9%80%9A%E5%B8%B8%E5%9C%A8%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%AD%E6%98%AF%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E7%94%A8font-family%E5%B1%9E%E6%80%A7%E5%B0%B1%E6%97%A0%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%BA%86%E3%80%82"># 通过css的@font-face属性，在网页上显示用户电脑没有的字体。</a>，<a href="https://github.com/lxgw/LxgwWenKai/issues/24"># 如需网页上嵌入，请看这里</a>由于时间关系，没有深入研究。</p><h4 id="2-7-2-修改全局字体大小">2.7.2 修改全局字体大小</h4><p>在<code>matery.css</code>中修改<code>font-size</code>的值</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#articleContent p</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 2px 2px 10px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.85rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*无序列表*/</span><span class="token selector">#articleContent ol li</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> list-item<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-自定义鼠标样式">2.8 自定义鼠标样式</h3><p>首先将鼠标样式下载到本地，推荐大家一个网站：<a href="https://zhutix.com/ico/ori-cursors/">https://zhutix.com/ico/ori-cursors/</a></p><p>以我的为例，我将鼠标指针样式放在了主题文件夹下的medias目录下，然后打开<code>themes\matery\source\css</code>下的<strong>my.css</strong>文件，添加内容如下：</p><pre class="line-numbers language-none"><code class="language-none">*{    cursor: url("/medias/imgs/zhengchang.ico"),auto!important;}:active{    cursor: url("/medias/imgs/dianji.ico"),auto!important;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-9-页面特效效果增加">2.9 页面特效效果增加</h3><p>个人认为效果还是动态彩带效果最好</p><h4 id="2-9-1-添加背景动态彩带效果">2.9.1 添加背景动态彩带效果</h4><p>参考链接<a href="https://zhuanlan.zhihu.com/p/69211731"># Hexo 博客美化合集（不断更新）</a>和<a href="https://kaizynx.github.io/2020/03/19/Sakura_setting/"># Hexo-Sakura主题配置</a>，链接1提供的代码有误，与链接2提供的内容结合才可以实现该功能。<br><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202403241328890.png" alt=""><br>实现方法：在 \themes\material-x\layout\layout.ejs 文件的body前面添加如下代码：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/piao.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以参考<a href="https://iymark.com/articles/649.html"># js代码为你得网站加入动态彩色飘带</a>，将彩带文件更改为本地文件，此处未做尝试</p><h4 id="2-9-2-樱花飘落">2.9.2 樱花飘落</h4><p>此处作者博客中没有写相关代码，而且个人认为添加樱花效果反而显得页面很乱，这里没有记录</p><h4 id="2-9-3-背景动态科技线条">2.9.3 背景动态科技线条</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!--动态线条背景--&gt;&lt;script type="text/javascript"color="122 103 238" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10-页面加载动画添加">2.10 页面加载动画添加</h3><p>主要按照博客<a href="https://blog.csdn.net/weixin_43662760/article/details/122311217"># Matery主题自定义(六)页面加载动画</a>进行，建议访问原博客</p><ol><li>在 <code>themes&gt;hexo-theme-matery&gt;layout&gt;_widget</code> 下创建一个 loading.ejs 文件，将下面的代码 cv 进去</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.preloader.enable) { %&gt;  &lt;div id="loading-box"&gt;    &lt;div class="loading-left-bg"&gt;&lt;/div&gt;    &lt;div class="loading-right-bg"&gt;&lt;/div&gt;    &lt;div class="spinner-box"&gt;      &lt;div class="configure-border-1"&gt;        &lt;div class="configure-core"&gt;&lt;/div&gt;      &lt;/div&gt;      &lt;div class="configure-border-2"&gt;        &lt;div class="configure-core"&gt;&lt;/div&gt;      &lt;/div&gt;      &lt;div class="loading-word"&gt;加载中...&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;!-- 页面加载动画 --&gt;  &lt;script&gt;    $(document).ready(function () {      document.body.style.overflow = 'auto';      document.getElementById('loading-box').classList.add("loaded")    })  &lt;/script&gt;&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>完成了结构代码，下面就开始样式代码了，不然没有样式的动画也太丑了，下面的就是样式代码<br>当然，在复制粘贴代码之前，需要先创建样式文件<br>在 themes&gt;hexo-theme-matery&gt;source&gt;css&gt; 下创建一个新的文件 loading.css，在将下面的代码复制粘贴</li></ol><pre class="line-numbers language-none"><code class="language-none">#loading-box .loading-left-bg,#loading-box .loading-right-bg {  position: fixed;  z-index: 1000;  width: 50%;  height: 100%;  background-color: #37474f;  transition: all 0.5s;}#loading-box .loading-right-bg {  right: 0;}#loading-box&gt;.spinner-box {  position: fixed;  z-index: 1001;  display: flex;  justify-content: center;  align-items: center;  width: 100%;  height: 100vh;}#loading-box .spinner-box .configure-border-1 {  position: absolute;  padding: 3px;  width: 115px;  height: 115px;  background: #ffab91;  animation: configure-clockwise 3s ease-in-out 0s infinite alternate;}#loading-box .spinner-box .configure-border-2 {  left: -115px;  padding: 3px;  width: 115px;  height: 115px;  background: rgb(63, 249, 220);  transform: rotate(45deg);  animation: configure-xclockwise 3s ease-in-out 0s infinite alternate;}#loading-box .spinner-box .loading-word {  position: absolute;  color: #ffffff;  font-size: 0.8rem;}#loading-box .spinner-box .configure-core {  width: 100%;  height: 100%;  background-color: #37474f;}div.loaded div.loading-left-bg {  transform: translate(-100%, 0);}div.loaded div.loading-right-bg {  transform: translate(100%, 0);}div.loaded div.spinner-box {  display: none !important;}@keyframes configure-clockwise {  0% {    transform: rotate(0);  }  25% {    transform: rotate(90deg);  }  50% {    transform: rotate(180deg);  }  75% {    transform: rotate(270deg);  }  100% {    transform: rotate(360deg);  }}@keyframes configure-xclockwise {  0% {    transform: rotate(45deg);  }  25% {    transform: rotate(-45deg);  }  50% {    transform: rotate(-135deg);  }  75% {    transform: rotate(-225deg);  }  100% {    transform: rotate(-315deg);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>添加至页面<br>在将加载动画添加至页面中<br>找到 themes&gt;hexo-theme-matery&gt;layout&gt;_partial&gt;head.ejs 文件，这个文件专门用来引入样式文件和配置网页信息</li></ol><p>在  标签中引入 loading.css 文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;link rel="stylesheet" type="text/css" href="&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/css/loading.css') %&gt;"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引入样式文件后，引入结构文件 loading.ejs，插入在themes&gt;hexo-theme-matery&gt;layout&gt;layout.ejs  标签下第一行就行了</p><pre class="line-numbers language-none"><code class="language-none">&lt;%- partial('_widget/loading') %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>配置<br>最后在主题配置文件中进行配置 _config.yml，true 是开启；false 是关闭</li></ol><pre class="line-numbers language-none"><code class="language-none"># 是否开启页面加载动画preloader:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-11-图片冒泡功能">2.11 图片冒泡功能</h3><p>同样是参考同一作者的博客<a href="https://blog.csdn.net/weixin_43662760/article/details/122311008">图片冒泡功能</a></p><ol><li>创建 buble.js<br>在 <code>themes&gt;hexo-theme-matery&gt;source&gt;libs&gt;others</code> 下创建一个新的文件 <code>buble.js</code>，将下面的代码 CV 到 <code>buble.js</code> 中</li></ol><pre class="line-numbers language-none"><code class="language-none">// 上升的气泡function buble () {  $('.carousel-item, .pd-header').circleMagic({    radius: 10,    density: .2,    color: 'rgba(255,255,255,.4)',    clearOffset: 0.99  });} ! function (p) {  p.fn.circleMagic = function (t) {    var o, a, n, r, e = !0,      i = [],      d = p.extend({        color: "rgba(255,0,0,.5)",        radius: 10,        density: .3,        clearOffset: .2      }, t),      l = this[0];    function c () {      e = !(document.body.scrollTop &gt; a)    }    function s () {      o = l.clientWidth, a = l.clientHeight, l.height = a + "px", n.width = o, n.height = a    }    function h () {      if (e)        for (var t in r.clearRect(0, 0, o, a), i) i[t].draw();      requestAnimationFrame(h)    }    function f () {      var t = this;      function e () {        t.pos.x = Math.random() * o, t.pos.y = a + 100 * Math.random(), t.alpha = .1 + Math.random() * d.clearOffset,          t.scale = .1 + .3 * Math.random(), t.speed = Math.random(), "random" === d.color ? t.color =            "rgba(" + Math.floor(255 * Math.random()) + ", " + Math.floor(0 * Math.random()) + ", " + Math.floor(              0 * Math.random()) + ", " + Math.random().toPrecision(2) + ")" : t.color = d.color      }      t.pos = {}, e(), this.draw = function () {        t.alpha &lt;= 0 &amp;&amp; e(), t.pos.y -= t.speed, t.alpha -= 5e-4, r.beginPath(), r.arc(t.pos.x, t.pos.y,          t.scale * d.radius, 0, 2 * Math.PI, !1), r.fillStyle = t.color, r.fill(), r.closePath()      }    } ! function () {      o = l.offsetWidth, a = l.offsetHeight,        function () {          var t = document.createElement("canvas");          t.id = "canvas";          t.style.top = 0;          t.style.left = 0          t.style.right = 0          t.style.zIndex = 0;          t.style.position = "absolute";          l.appendChild(t);          t.parentElement.style.overflow = "hidden"        }(), (n = document.getElementById("canvas")).width = o, n.height = a, r = n.getContext("2d");      for (var t = 0; t &lt; o * d.density; t++) {        var e = new f;        i.push(e)      }      h()    }(), window.addEventListener("scroll", c, !1), window.addEventListener("resize", s, !1)  }}(jQuery);buble()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>_config.yml 配置<br>接着将这个文件在主题的配置文件（_config.yml）中 lib:js: 下引入，大约在 458 行</li></ol><pre class="line-numbers language-none"><code class="language-none">buble: /libs/others/buble.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在主题的配置文件（_config.yml）中添加下面的代码</p><pre class="line-numbers language-none"><code class="language-none"># banner 冒泡buble:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>引用<br>在 themes&gt;hexo-theme-matery&gt;layout&gt;layout.ejs 这的 body 标签中添加下面的代码</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 冒泡 --&gt;&lt;% if (theme.buble.enable) { %&gt;    &lt;script type="text/javascript"&gt;        // 只在桌面版网页启用特效        var windowWidth = $(window).width();        document.write(            '&lt;script type="text/javascript" src="&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.buble) %&gt;"&gt;&lt;\/script&gt;'        );    &lt;/script&gt;&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>banner 冒泡的效果就完成了</p><h3 id="待优化功能">待优化功能</h3><ol><li>夜间模式</li><li>点击图片翻转</li><li>通过在线配置字体的方式，使得未安装该字体的浏览器也能正常显示</li></ol><h2 id="3-博客优化">3 博客优化</h2><p>此处并未进行修改，工作放在以后</p><h3 id="3-1-gulp代码压缩">3.1 gulp代码压缩</h3><h4 id="hexo-neat">hexo-neat</h4><p><a href="https://adaning.github.io/posts/42790.html">源网站</a><br>使用<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a>更为简单, 美中不足的是这个插件有俩小bug:</p><ul><li>压缩<code>.md</code>文件会使 markdown 语法的代码块消失.</li><li>会删除全角空格.</li></ul><p>但是它避免了国内<code>npm</code>的使用问题. 所以我推荐这种方式.</p><p>在博客根目录命令行输入:</p><p>bash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> hexo-neat <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Hexo配置文件末尾加入(已针对matery的bug优化):</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span><span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">neat_html</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.md'</span><span class="token key atrule">neat_css</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span><span class="token key atrule">neat_js</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">output</span><span class="token punctuation">:</span>  <span class="token key atrule">compress</span><span class="token punctuation">:</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/**/instantpage.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/matery.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-CDN加速">3.2 CDN加速</h3><h2 id="总结">总结</h2><p>此次主要依靠各位大佬的记录，优化博客界面，对于主题<code>matery</code>修改了一些样式，增加了一些功能。但对于前端页面的知识还是了解特别少，博客优化方面还有很多需要学习的地方，下面记录一下各位大佬的博客链接，方便以后优化页面，了解相关知识。再次感谢各位大佬的知识分享。<br><a href="https://blog.csdn.net/weixin_43662760/category_11551976.html"># matery主题优化专栏</a><br><a href="https://blog.csdn.net/weixin_42429718/article/details/105723193?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171118467516800227433663%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=171118467516800227433663&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-105723193-null-null.nonecase&amp;utm_term=matery&amp;spm=1018.2226.3001.4450"># 【源码开放】Hexo+Github+Coding 博客butterfly 和 matery 主题 搭建完全教程【整理】</a></p><h2 id="参考链接">参考链接</h2><p><a href="https://fenghen0918.github.io/2020/10/22/hexo/hexo-bo-ke-you-hua-pian-matery-yi/#toc-heading-1">魔改记录</a><br><a href="https://yafine66.gitee.io/posts/20200317173728-8c84.html">大佬原始文件</a><br><a href="https://blog.17lai.site/posts/84b4059a/#%E4%B8%8D%E8%92%9C%E5%AD%90-busuanzi-%E6%96%87%E7%AB%A0%E8%AE%A1%E6%95%B0%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98">基于Hexo的matery主题搭建博客常见问题篇6 | 夜法之书 (17lai.site)</a><br><a href="https://marmalade.vip/Materysettings1.html"># Hexo-Matery主题细致美化(上)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3中元信息</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-zhong-yuan-xin-xi/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-zhong-yuan-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>元信息是关于Ns3中ObjectBase与其各种子类的辅助信息。每一个类有且仅有唯一一组元信息。元信息是实现对象聚合、属性与Trace变量配置的基础。例如对象聚合数据利用元信息的类名与父类TypeId查找对象。</p><p>元信息管理接口：TypeId类</p><p>TypeId是一个C++类，本文将其视为元信息管理接口</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3中网络仿真</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-zhong-wang-luo-fang-zhen/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-zhong-wang-luo-fang-zhen/</url>
      
        <content type="html"><![CDATA[<h2 id="1-无线仿真">1 无线仿真</h2><p>以<code>wifi-ap.cc</code>为例</p><h3 id="1-前提知识">1. 前提知识</h3><ol><li>Packet::EnablePrinting ();</li></ol><pre><code> 在ns-3中，Packet::EnablePrinting()是一个用于启用或禁用数据包（Packet）的打印输出的方法。ns-3是一个用于网络仿真的开源工具，Packet::EnablePrinting()方法是其Packet类的成员函数之一。 当你启用打印时，数据包对象在调用适当的打印函数时会打印其内容。这对于调试和了解仿真中的数据流非常有用。 但需要注意的是，启用打印输出会产生额外的开销，因为在每个打印语句中都需要处理数据包的内容。因此，在生产环境中，应该谨慎使用打印功能，以避免影响仿真的性能。</code></pre><h2 id="2-有线仿真">2 有线仿真</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3仿真</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-fang-zhen/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-fang-zhen/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d5b1885183019482f468a3db14c357a21910fc7e890db96c5e84ccca06c71bc4">3ff77c54aa7a66ade165d2786cc07e2f94d73489c9330247d34aaa275992e2a1f5843d7ebc847ca57a26cb5dcdddf69ba806692292932e340decd564d6693b9a20849a500bca92700af51167193e9b68055e030af0d6b0ba7cc5c156274f546034e745c5da4dc28f91e5566ef77a279bd3ded6d6e34a6a2029f7dd55c43d59c7709215b5cfad581c4191cb8335c21590b8d7d01ae38d172411df2e8c7ce0c5479a8f809c11a1051b5cb4a240d5805a8cb8da3d08793d34b48b571ebbc361f5a99d7af190fa1e1798cb066ed814d463751d42d8470d08134c15bf698ad6acab212117e930b4de8c8d16df760fe9df47a42a61168926d86459559512b8aa4eb7cc637d0a5681be2b7b0896fd0fff95d28ad61ab012308d1569bb4d6214fa6e23b7583a09933d3d75abd22b82d81b539a9c18c1c384ff9be1f7051af4c39bcc6666e82841069c67d7e452a7c914a40532a5d5e55beda1ae05f680c6e413d8984046d54d66a497a9986c8bbaeb356321bfce248409e5d8c749fd2c5b50d3837b4028196a70c48662605144fafcb3a546df3cd1e57c0ad7357356e16c1ee80a7cb0a10d62d408dafc55d074fe6e4849836e3c81083016638920318e03b3ebe8e2fc841a9aa35427d296aab967d74819828a25e393bb07865f7ed0553a903d3f4ebbee9072536b398fb459f3f72e12ac876338e495c8d1fbb3b4f874108faef5adc104770cc3fd524ce47c166c68e08a0cf6824e2eac6d6a715bfb48bec23f2e977405d0fc314665c7cf9fda5031bc105713b1615900d0d258e31929b705604f3b712d681db282aa3ef586a41099c046be53153b86f06ff9f5e1f1ec24984177ac8290b2034570bf70fdbb1582105dd8e3ef1d8b394e6ff449bdc2ab95d2a5f1c7834735ea4de72a7ed9d2f2ca1debd2052a48156728fa8bc4c57e7052838a8b39f660c778e0253b7972f796369da65d5ff8c89b86ae434ef6773942f45aef1db03bcef63f5e26d838889735e7f1e3711af9ce4cafb2ef5e4e201c425e2803b8a982b66a289b4be928b3a8bb162fac1371ef7ff9413262804868c85c886b5f04b760761ef1de0775bcee40c6bfeb7c480182c805afd52effc5e18cb84d1ca6a509e0f2fd2b5baf2e4aee73048863b2a8d22e710630d43b84f64394513f8a134284fe065d002f1321ef0114b24ba9b57349f10438dfdb094dfbdd5327884384a3dd25b902d2549c57e80479824297abdeb0ba25a9e1da82217284265fc5a2a55a3013145cf33e4a9e05c175aeeb223cc7212a571d6449faccd83276ead3b020ef99be6a3019d023c7f9ebf6b92c10eb3bc36208afca3469ded2e515cda3f32f4485fc7034fb57974792cf053fe754f43b89c8d1bb9a1b9707693fda28596b3020cc852f3c5ad6fbe2e35e58a3b8e82aee356755531d3b79d6bbad0019328272ddc19c9cb32c4f2ac20c71dc3a9289bd31326e82d994e5d88f1fcce9ac7d72dc901e1736462e2323765f5343f09f38f424d3e6988792c57fb0872a7d3e4a13d96e9e4e2a44cdaee8ff99843ef60b7a1f4d44a447e7f5adf77f859b19ac8af40e29c2a54aa6cca3e674404d2c27a57510c77aa58ca598c34840df63d18333f5c52308d4f7929680f2f2df6da19e98b0ea2ef75c2bd9703c93825e32e3ae486c2d83e6098bcbdd3792cd9a513d6489905d407a44a4cf162f4d266e406e61e7d7c3eaa70f28583470573c630f70aad2dfec113fa02bc2e7513801647ab5404be2dacc7c6bf80938033a307e62140ddb9612a6f6162317ed500d57d03de3de9d0ce725891d7ca650e44fefa615f7b9d83ec388471aa4bea20aaf2329a0195696f3d9b6d4d2a60522a8c25481d752fafa285122fb6aaa025f88c3b78c84b5355d902bc391181a2d4946c6bf7b66c0dfea9a08fabfa3622c4cce858503e459e97d63f981f9351a4c30a549a8d83aa0f233f56e953430bd5025d67d0afcfbbb62122eda9d0cf4a109f59740e32c9a1458e19ff50e608b6571b7d76bdd73ae5ae932ff05a0b4172b4cef67c4ddc7377b361c96948429a00bc2a158b283d0304aedf57b442c5b76b9c0c2c6e5c060ffb6ee2be76b7d05e899c336172b308e17ba30cb3ca6b552b8c446fc8ced6bf31ee3cba053fb5ee9ec508fd909da80f04af70e9defd930f584f40534101b0e9478038e7b437bb9eed47c08e82a627ceb6690a0275e19107735771b51a4fdd80706adeab217f33866ce55548c891990b7d970ae81cf957ff1ccd739e2a13df26a7a04d4a2429106071c6d839c5c70fbb710aa1e3065d92b1e70eb63d8affcc0a58c39e2c882a85e8aa9383471e99e0f30cdf779e95db1bdc58a0bcb5c3d2c2188b07a26511e0fb379523cf0ccaeb6005970ca424328d2ec0303b2ec8aae532326b8c4c147eb6e6f81dd82fc302a480089742a24810c728ab86ac7b8e5eecef827cb8dcd3610c3cb0f258f71838a7583fa13f5d2e2b9511feb83fb1eae2e0965f5c756965553aaf36927860159b4f1ce3dbe8ef2f0c2ea8a8dc950bee0f0685af2765ccc91b426e3eb436ece4dd01b41a498b1ea8c401d9827fbc9f5f39984fd29a6db007cc98d9be766d578c2e9c4f966a70294a0bfdc219081fc9e31db47039f6d31e9e3e26d73239573fc506657f7debd89211c6a2725b5a89a9891869f5bac566a788fc2ab2a0bd7fe8e01aa3a81b803fda6ca816994e71f5fe4d8847fc0700a211aa64074bcabb93bc7fa6fffc7e99c3ac81f1c5c385b10019f6dd5f9413ca9fde3622630ed2b7d784b59fa39c0f41740ca9a6ef838d970dc23232d548f86bccd4e55341fad3f9e3394c94bb2bf5c0a3405d07af79303518155603b46ecf6dd85943bd61ac61a6fd3e2da41d5df18435c80fbf159807886c780ad59e6a7e2ebce71607412342e06262edc2d7eb2a8d35e6810f332484b7c56b98049ec4c1c133196d3d6c84c55f462e230ed46c0faa77fb22fe7272eed69127fffd5b0706c25ffc9da093ec512ab801d142008e2d462c7b9ad82a92ef5381ab0ab6a4609a736be8b5f6ba08b58b553c91fc7b38c8e7f59f8edfeb127c43e545c68ae0e6657d878add29b8e5d2d35921abcbed21969635fa6299dfc6e2bc8d2efb085fa024a5df746589b7cc12e1f4860c0a2949105b8cbef017829ada0fdb0b4482be367e771d473e7c8644acb508f53989a5639de669d6adab1d5020e7dbb2be0c110340ff5a095b5795802238aab3b1cd1a62f3fe76cfc10de1bd904c3ef6895798428b5fd9a67c519037a771aee6a80bca4d0bc4effac64a6c598b5c1b15042c98e1cfc9389c7c20839e39bc0cfadb9a7f74f763e64f5fe47c3e645b55297263a2d8dc7051bf64c1a5ab671e15c6cd7526d1ccec34e99e29ddc62805cddf2ecdeee48cbd93401b3c099c7e1128a1b5efe304af11460b8da9b92832f9abd1d3d31c91404c8fb1e0a44e08fd7c3e28eeabece5a34d1568081efc78afcab7702875e3f23ba6b80a255c568f924e546a83c959a78fe541162e51e82f76cf3b3418335f4b3050d95c9283b393c1342848450f0337f8505866da01bc11eadeb6660adf3b3b521475452dd4cd32053b51c7b38beaa58b7c9259d34bce2557285a245b34de49bf90c647909c89a4fdf301bd7bcb87d74b3152655d3a8f666a02201d87eb006eaa527ff71684d9363524c5035e7469db58311ef11830270c9b3da2ddfcb1811167ba2856697597ebc41cc94696eaaacfc3a9a751ad9ceb7e69fcf90539f6abfca06769e26da00e36166c0ce6b2b5a4b656baf35f1c4ff62874950d5a273bd20ac754ccd372192f8d2e2072b2388ee4369ab7c724de2a4a7b406753067f453a5f39da9956834ab20a04078b00cb18836533676da6495aa615d87ab3466abc49e52a3893a7a953fb7e39b19224f1a030f3ff7626277508c5d3f23bd26d5ed94b4a6b1e3e995173cd2f06f56bbc7ff82f2e330ab0ec31022746ae554219904c47633719c067a070b1af55dcf08a5f689161501f8d78c9e2fa8f1f7c44511cf60b5d5a1935653fb8fa52b7046a1e3bc380fb0451475b923107c54f99d466ace6a6eadfe4c93978b54534508aeb89276258455896033def754bebbbec074edac98e4fd2dd0a572dcd6e56b029ce104c0d1ff430e14eeaf829438c45f2fcbe95f02e0a7b61ecc9cc9c9c8266facac981132559259d45f7af29a59f7f65ef9608d79583abe99aa63672da4641e283dc8d222c6431ec914c31aabc99ba320de39bc1aff6916576f44308362d488c90d2fdd5bf44e8f1965694f6e3f2b8ac6bc414923406ac386e082167635970a6b3dcff0c27b2f71704f50b99003806b24ffdd59d1e47ea434f9ab7bccf383b0c04c6c0be2a414d6d91c8e5bce63970528981555ab47d136d46de62563232f3f1bc4b2c4382e49b0bcd96ae1e0def381dffa4ea1629eea12b77171513d602d376a8cd60017f2928976740119cd13985281c1bba19f39e10c820cb3b71543190092b20e2dbcdf668a5b6819ffae73eac18123f0a8471b0d60afc03dfb096ef512a89f23b02d5431d2ad07734ae7f07752532efae892ec6b9b55f639156416dedf57532451c86d338835a4958f88bcfb55129465c59d1d7677d98c6ce9b81a9e94ea7a51262f5fd53746d42acde437b09f15746478ba870a38ab784bdce9ce8f9cac8da57bbe7dcb8b949971560007731547a432d1d32cc948e0dc27d7f78a0d6c38ae176ee09c40ebe04d0d15dc459024fa66b753839233bc62377d9171d3b80758acfecf8840703469d87d3763ec3435b8b166aa8db4c2a49a120b717134487b8c7497315d9e1ee167fc8a12ef199e8aef41a1852197ee6603dc650f2fcb30d66510453df871b14234f455d8b76488eb816a4d4f8c8bec9f707ecddaf944b150cb480d4e7f3103b5329fac9a55bbdd75783d02a9d756786815417e641b685e507e7982a2d65e56e4492ae0710fd173e57a7651822c11dfc4a3e6f62c86679edcf97691143a5f508396bb46e78a57bc4b39838394a838cfebed8a9b56226f49b1e74878f467a9dc46eec97f5e7d8f0c83ba90a018405c04ffed407aa595582022163c9430379713459740a6658bcf9355bb102b58072e8f14a5b7059e5635a50c177d3203a9f43ded2a4164617b6fa37784aea32373d917d17ddb4db686819207518edc32b719fe7361206bbef9d8299eaf6888d0e9b72a8b6e77647438a57ad55c317ecca71f336001cdac8cb37a1b7682ccf65a7b6912ba91c79f96543e85fc26e1d1e9a2eb27c4040f8d5edd0edfa03f4969ea6eed48684288a9a621f3b9c97f53969a7a61c142ee45f856df0bf51f7212f41098d5821eb3c35f0ce31622d2d649d56c84b8a5c75ac65f7310b20ca3757e79f7637b8b672ced473e24e4f30646897b13dd339519433c75f462968e829337f082302b82fc52359058b3a00c19784af3ee08f417d2946e5fb0aefd7e8f9aec8081907b78c3412ff78f362196d6789bfb7336c7c39696e2f93054c59fae24e837360bbe2b5c4b0e11bb0f384c909a682f7bb969b10d38fa5f1da587b128249a3b528522547d4949d22958cb0f01fd0cf8864948fcde9421cd2008b9288bba48</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3使用新的模块</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-shi-yong-xin-de-mo-kuai/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-shi-yong-xin-de-mo-kuai/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fwhdzh/article/details/106361397">NS3使用新的模块方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3学习资料汇总</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-xue-xi-zi-liao-hui-zong/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-xue-xi-zi-liao-hui-zong/</url>
      
        <content type="html"><![CDATA[<h2 id="学习资料">学习资料</h2><h2 id="1-官方学习网址">1 官方学习网址</h2><p><a href="https://www.nsnam.org/documentation/">NS3文档网址</a></p><p><a href="https://www.nsnam.org/tutorials/">Ns3官方学习网站</a></p><p>以下内容为官方网站复制内容</p><h3 id="Getting-started">Getting started</h3><ul><li><strong>Tutorial:</strong> The tutorial for our latest release is available in <a href="https://www.nsnam.org/docs/release/3.37/tutorial/html/index.html">HTML</a> and <a href="https://www.nsnam.org/docs/release/3.37/tutorial/ns-3-tutorial.pdf">PDF</a> versions.</li><li><strong>Installation instructions:</strong> We typically maintain this information on our <a href="https://www.nsnam.org/wiki/Installation">wiki</a>.</li><li><strong>Videos:</strong> The ns-3 Consortium has offered training and tutorial sessions at its <a href="https://www.nsnam.org/research/wns3/">annual meeting</a>, and recorded videos from prior sessions can be found from <a href="https://www.nsnam.org/consortium/activities/training/">this training page</a>. Note that due to the pandemic, in-person training sessions have not been offered since 2019. For some additional recorded sessions, please see also the <a href="https://www.nsnam.org/documentation/videos/">videos</a> page.</li><li><strong>Mailing lists:</strong> We have several <a href="https://www.nsnam.org/support/mailing-lists/">mailing lists</a>, but in particular, the <a href="https://groups.google.com/forum/#!forum/ns-3-users">ns-3-users Google Group forum</a>, answers many questions from people trying to get started.</li><li><strong>Chat:</strong> ns-3 discussions also take place in a <a href="https://ns-3.zulipchat.com/">Zulip</a> chatroom.</li></ul><h3 id="Development">Development</h3><p>Most users will need to write new simulation scripts and possibly modify or extend the ns-3 libraries to conduct their work. The three main resources for this are our reference manual, model library documentation, and our Doxygen.</p><ul><li>We maintain a <strong>reference manual</strong> on the ns-3 core, and a separate <strong>model library</strong> documentation set, also in <a href="https://www.nsnam.org/ns-3-37/documentation/">several formats</a> for our latest release.</li><li>All of our APIs are documented using <a href="https://www.nsnam.org/docs/release/3.37/doxygen/index.html"><strong>Doxygen</strong></a>  【里面为程序中重要的API说明】</li><li>The ns-3 <a href="https://www.nsnam.org/developers/contributing-code/coding-style/">coding style</a> documentation is maintained on this site.</li></ul><h2 id="2-相关书籍">2 相关书籍</h2><p>开源网络模拟器ns-3 - 架构与实践</p><p>电子书 <a href="https://weread.qq.com/web/bookDetail/21932bf07210dbdd2191d13">开源网络模拟器ns-3 - 架构与实践</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3常见问题处理</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-chang-jian-wen-ti-chu-li/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-chang-jian-wen-ti-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="编译问题">编译问题</h2><h3 id="1-NS3编译错误">1 NS3编译错误</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cc1plus: all warnings being treated as errors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CXXFLAGS</span><span class="token operator">=</span><span class="token string">"-Wno-error"</span> ./waf configure  <span class="token comment">#注意等号前后没有空格，进行该配置之后再进行编译 即可忽略警告</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3队列模型介绍</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-dui-lie-mo-xing-jie-shao/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-dui-lie-mo-xing-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>队列模型位于TC(Traffic Control)层，TC层所有模型均在<code>src/traffic-control/</code>文件夹中，队列相关代码主要是 <code>src/traffic-control/model/queue-disc.cc</code>、<code>src/traffic-control/model/queue-disc.h</code>两个文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ns3Trace系统总结</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3trace-xi-tong-zong-jie/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3trace-xi-tong-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1>Ns3 Trace系统</h1><h2 id="Trace变量配置">Trace变量配置</h2><p>​由于Ns3初始化并没有提供Trace变量的初始值，创建变量时无法根据配置好的函数指针初始化Trace变量，因此只能在已存在的C++对象上配置Trace变量。</p><p>​在对象未创建、未分配内存时，Trace变量是无法配置的，即使配置相关属性，也不能成功使用。因此，Trace变量的配置操作必须放在网络拓扑用户应用建立完成之后，但必须放在<code>Simulation::Run()</code>之前。为保证每次成功配置并成功运行，十分建议养成在<strong>程序末尾配置Trace + 开启仿真运行的习惯</strong>。</p><h3 id="1-ipv4-l3-protocol发送数据包">1. ipv4-l3-protocol发送数据包</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//src/internet/model/ipv4-l3-protocol.cc</span>TypeId <span class="token class-name">Ipv4L3Protocol</span><span class="token double-colon punctuation">::</span><span class="token function">GetTypeId</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">AddTraceSource</span> <span class="token punctuation">(</span><span class="token string">"TxTrace"</span><span class="token punctuation">,</span>                     <span class="token string">"Send ipv4 packet to outgoing interface."</span><span class="token punctuation">,</span>                     <span class="token function">MakeTraceSourceAccessor</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>Ipv4L3Protocol<span class="token double-colon punctuation">::</span>m_adTrace<span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"ns3::Ipv4L3Protocol::AdressCallback"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">void</span><span class="token class-name">Ipv4L3Protocol</span><span class="token double-colon punctuation">::</span><span class="token function">CallTxTrace</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Ipv4Header <span class="token operator">&amp;</span> ipHeader<span class="token punctuation">,</span> Ptr<span class="token operator">&lt;</span>Packet<span class="token operator">&gt;</span> packet<span class="token punctuation">,</span>                                    Ptr<span class="token operator">&lt;</span>Ipv4<span class="token operator">&gt;</span> ipv4<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> interface<span class="token punctuation">)</span><span class="token punctuation">{</span>  Ptr<span class="token operator">&lt;</span>Packet<span class="token operator">&gt;</span> packetCopy <span class="token operator">=</span> packet<span class="token operator">-&gt;</span><span class="token function">Copy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  packetCopy<span class="token operator">-&gt;</span><span class="token function">AddHeader</span> <span class="token punctuation">(</span>ipHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">m_txTrace</span> <span class="token punctuation">(</span>packetCopy<span class="token punctuation">,</span> ipv4<span class="token punctuation">,</span> interface<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//src/internet/model/ipv4-l3-protocol.h</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">// The following two traces pass a packet with an IP header</span>  <span class="token comment">/// Trace of transmitted packets</span>  <span class="token comment">/// \deprecated The non-const \c Ptr&lt;Ipv4&gt; argument is deprecated</span>  <span class="token comment">/// and will be changed to \c Ptr&lt;const Ipv4&gt; in a future release.</span>  TracedCallback<span class="token operator">&lt;</span>Ptr<span class="token operator">&lt;</span><span class="token keyword">const</span> Packet<span class="token operator">&gt;</span><span class="token punctuation">,</span> Ptr<span class="token operator">&lt;</span>Ipv4<span class="token operator">&gt;</span><span class="token punctuation">,</span>  <span class="token keyword">uint32_t</span><span class="token operator">&gt;</span> m_txTrace<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ns3文件对象模型架构</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-wen-jian-dui-xiang-mo-xing-jia-gou/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-wen-jian-dui-xiang-mo-xing-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1>Ns3对象之间的关联</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">m_ipv4<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>Node<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetId</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="网络层对象">网络层对象</h2><p>具体代码存在于<code>src/internet/model/ipv4-l3-protocol.h</code>中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * \brief Get an interface. * \param i interface index * \return IPv4 interface pointer */</span>Ptr<span class="token operator">&lt;</span>Ipv4Interface<span class="token operator">&gt;</span> <span class="token function">GetInterface</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">uint32_t</span> <span class="token function">GetNInterfaces</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">int32_t</span> <span class="token function">GetInterfaceForAddress</span> <span class="token punctuation">(</span>Ipv4Address addr<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">int32_t</span> <span class="token function">GetInterfaceForPrefix</span> <span class="token punctuation">(</span>Ipv4Address addr<span class="token punctuation">,</span> Ipv4Mask mask<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">int32_t</span> <span class="token function">GetInterfaceForDevice</span> <span class="token punctuation">(</span>Ptr<span class="token operator">&lt;</span><span class="token keyword">const</span> NetDevice<span class="token operator">&gt;</span> device<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">IsDestinationAddress</span> <span class="token punctuation">(</span>Ipv4Address address<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> iif<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链路层对象">链路层对象</h2><p>主要文件位于<code>src/network/model/net-device.h</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * \param index ifIndex of the device  */</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetIfIndex</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint32_t</span> index<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/** * \return index ifIndex of the device  */</span><span class="token keyword">virtual</span> <span class="token keyword">uint32_t</span> <span class="token function">GetIfIndex</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ns3网络路由模块</title>
      <link href="/2024/02/01/ns3-fang-zhen/ns3-wang-luo-lu-you-mo-kuai/"/>
      <url>/2024/02/01/ns3-fang-zhen/ns3-wang-luo-lu-you-mo-kuai/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Ptr<span class="token operator">&lt;</span>Node<span class="token operator">&gt;</span> node <span class="token operator">=</span> m_ipv4<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>Node<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取相应的结点模型</span>Ptr<span class="token operator">&lt;</span>TrafficControlLayer<span class="token operator">&gt;</span> tc <span class="token operator">=</span> node<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>TrafficControlLayer<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//通过结点，获取相应的TC层</span>Ipv4RoutingTableEntry<span class="token operator">*</span> route <span class="token operator">=</span> allRoutes<span class="token punctuation">.</span><span class="token function">at</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">uint32_t</span> interfaceIdx <span class="token operator">=</span> route<span class="token operator">-&gt;</span><span class="token function">GetInterface</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取队列端口号</span><span class="token comment">// cout&lt;&lt;"ID "&lt;&lt;m_ipv4-&gt;GetObject&lt;Node&gt; ()-&gt;GetId ()&lt;&lt;"  interfaces "&lt;&lt;interfaceIdx&lt;&lt;endl;</span>Ptr<span class="token operator">&lt;</span>NetDevice<span class="token operator">&gt;</span> device <span class="token operator">=</span> m_ipv4<span class="token operator">-&gt;</span><span class="token function">GetNetDevice</span><span class="token punctuation">(</span>interfaceIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获得对应的网络设备</span>Ptr<span class="token operator">&lt;</span>QueueDisc<span class="token operator">&gt;</span> root <span class="token operator">=</span> tc <span class="token operator">-&gt;</span> <span class="token function">GetRootQueueDiscOnDevice</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获得相应网络设备对应的队列</span><span class="token keyword">uint32_t</span> rootBytes <span class="token operator">=</span> root<span class="token operator">-&gt;</span><span class="token function">GetNBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获得队列中包含的字节量信息</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"ID "</span><span class="token operator">&lt;&lt;</span>m_ipv4<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>Node<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetId</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"  interfaces "</span><span class="token operator">&lt;&lt;</span>interfaceIdx<span class="token operator">&lt;&lt;</span><span class="token string">" Bytes "</span><span class="token operator">&lt;&lt;</span>rootBytes<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 网络仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zotara同步文献方法</title>
      <link href="/2024/01/27/lun-wen/zotara-tong-bu-wen-xian-fang-fa/"/>
      <url>/2024/01/27/lun-wen/zotara-tong-bu-wen-xian-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>问题一：同步各个电脑笔记与数据</p><p><a href="https://zhuanlan.zhihu.com/p/414686776">https://zhuanlan.zhihu.com/p/414686776</a></p><p>其中,安装插件的方式可以参考这个网址：</p><p><a href="https://www.cnblogs.com/jianghaonan0818/p/15376754.html">https://www.cnblogs.com/jianghaonan0818/p/15376754.html</a></p><p><a href="https://blog.csdn.net/weixin_49818157/article/details/125200034">https://blog.csdn.net/weixin_49818157/article/details/125200034</a></p><h1>问题二：<strong>解决：无法打开Zotero数据库</strong></h1><p><a href="https://blog.csdn.net/qq_43585760/article/details/133989832">解决：无法打开Zotero数据库</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文写作</title>
      <link href="/2024/01/27/lun-wen/lun-wen-xie-zuo/"/>
      <url>/2024/01/27/lun-wen/lun-wen-xie-zuo/</url>
      
        <content type="html"><![CDATA[<h1>论文写作</h1><h2 id="结果分析">结果分析</h2><h3 id="1-写作方法">1 写作方法</h3><blockquote><p>以下内容来源于ChatGPT</p></blockquote><p>科技论文中的结果分析部分是非常关键的，它不仅仅是简单地<strong>陈述实验结果</strong>，更要<strong>深入剖析数据</strong>，<strong>解释观察到的现象</strong>，并将<strong>结果与研究问题或假设联系起来</strong>。以下是一个通用的科技论文结果分析部分的写作指南：</p><ol><li><strong>清晰陈述结果</strong>：<ul><li>在开始结果分析之前，先提供一个简明扼要的结果总结。</li><li>使用图表、表格和统计数据以清晰的方式呈现主要实验结果。</li></ul></li><li><strong>数据的准确性</strong>：<ul><li>强调实验数据的准确性和可靠性。讨论任何可能的偏差或误差来源，并解释你采取的措施来控制这些因素。</li></ul></li><li><strong>与文献和假设的关系</strong>：<ul><li>将你的实验结果与之前的研究和文献进行比较。讨论你的结果是否与先前的研究一致，或者是否存在差异。</li><li>检验你的实验结果是否支持或反驳了最初的研究假设。</li></ul></li><li><strong>趋势和模式</strong>：<ul><li>分析数据中的趋势和模式。有没有明显的关联或相互关系？这些趋势是否与你的研究问题相关？</li></ul></li><li><strong>统计分析</strong>：<ul><li>如果进行了统计分析，解释所使用的统计测试方法，例如 t 检验、方差分析等。提供 p 值，并讨论结果的显著性。</li><li>注意，不要仅仅陈述 p 值，而是解释它们的意义。</li></ul></li><li><strong>异常值和离群值</strong>：<ul><li>如果有异常值或离群值，解释它们的存在，并讨论它们是否对结果产生了重大影响。</li></ul></li><li><strong>影响因素</strong>：<ul><li>讨论任何可能影响结果的因素。这可能包括实验设计、样本大小、实验条件等。</li></ul></li><li><strong>局限性</strong>：<ul><li>诚实地讨论研究的局限性。指出研究可能存在的缺陷，以及对结果解释的限制。</li></ul></li><li><strong>未来工作</strong>：<ul><li>提出未来的研究方向。根据你的结果，探讨下一步应该采取的研究方向，以填补现有知识的空白。</li></ul></li><li><strong>清晰的结论</strong>：</li></ol><ul><li>总结结果分析，强调对研究问题的回答，论文的主要发现，以及这些发现的重要性。</li></ul><p>确保结果分析部分具有逻辑结构，清晰地展示你对实验结果的深刻理解和分析。在整个部分中使用专业术语，但确保解释清楚以便读者理解。</p><h3 id="1-例子">1 例子</h3><ol><li><strong>以刘勇毕业论文为例：</strong></li></ol><p>在这一部分中，本章对不同拓扑下各种算法的性能比较进行了分析和讨论。如图 3.5 所示，本章对不同算法下的控制器资源利用率进行了测试。在不同网络拓扑下，随着流量负载的增加，TSMM算法的控制器资源利用率总是维持在0.7以上。相比于传统的启发式算法NSGA-II 和OPA算法，TSMM算法有较高的网络性能。由于传统的启发式算法没有考虑控制器负载的约束，因此这会造成多个控制器之间资源的不合理分配。在NSFNET拓扑下，当流量负载为60时，相比于CCPP算法，TSMM算法的控制器资源利用率提高了35*.<em>6%；同时在OS3E 拓扑下，其提高了48</em>.*9%的控制器资源利用率。另外，在Ta2和Interoute拓扑下，相比于CCPP算法，TSMM算法的资源利用率至少提高了40%。</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202401271720778.png" alt="image-20240127172015669"></p><p>解析：</p><p>对于平均时延的性能比较，如图 3.6 所示。在不同拓扑下，随着流量负载的增加，平均时延也逐渐递增。相比于传统的启发式算法NSGA-II 和OPA算法，在流量负载为60时，TSMM有较好的时延性能（至少20%）。因为在实际执行过程中，TSMM算法对控制器和交换机之间的传输时延进行了优化，因此它能消减平均时延。在NSFNET和OS3E拓扑下，当流量负载为60时，相比于启发式CCPP算法，TSMM算</p><p>法分别消减了17*.<em>5%和21</em>.<em>3%的平均时延。同时，对于Ta2和Interoute拓扑，TSMM算法分别消减了6</em>.<em>5%和9</em>.*8%的平均时延。如图 3.7 所示，本章对控制器的负载均衡性能进行了测试。在不同网络拓扑</p><p>下，随着流量负载的增加，TSMM算法的负载均衡度总是维持在0.4以下。相比于其它三种传统的启发式算法，TSMM算法有较好的性能。相比于NSGA-II和OPA算法，TSMM算法的负载均衡性能平均提高了40%左右。在NSFNET拓扑下，当流量负载为150时，相比于CCPP算法，TSMM算法提高了31*.<em>6%的负载均衡性能；且在OS3E拓扑下，其提高了33</em>.*5%的负载均衡性能。在Ta2和Interoute拓扑下，相比于CCPP算法，TSMM算法提高了至少20%的负载均衡性能。因为，在控制器部署过程中，TSMM算法考虑对多个性能指标进行优化，并通过交换机迁移方法实现控制器负载的均衡分布。</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202401271722781.png" alt="image-20240127172158577"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex使用方式</title>
      <link href="/2024/01/26/latex/latex-yu-fa/"/>
      <url>/2024/01/26/latex/latex-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1>Latex使用方式</h1><h2 id="1-Latex优势">1 Latex优势</h2><ul><li>使用固定模板，格式固定，只需套用模板即可生成文章</li></ul><h2 id="2-Latex图表">2 Latex图表</h2><h3 id="1-表格">1. 表格</h3><ol><li><strong>设定表格宽度</strong><a href="%5BLatex%E8%A7%A3%E5%86%B3%E8%A1%A8%E6%A0%BC%E8%BF%87%E5%AE%BD%E9%97%AE%E9%A2%98%EF%BC%8C%E8%87%AA%E9%80%82%E5%BA%94%E8%B0%83%E6%95%B4%E5%AE%BD%E5%BA%A6%5D(https://zhuanlan.zhihu.com/p/337457317)">^1</a></li></ol><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">graphicx</span><span class="token punctuation">}</span> # 记得加宏包<span class="token function selector">\resizebox</span><span class="token punctuation">{</span><span class="token function selector">\linewidth</span><span class="token punctuation">}</span><span class="token punctuation">{</span>!<span class="token punctuation">}</span><span class="token punctuation">{</span>  #此处！表示根据根据宽高比进行自适应缩放<span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span>...........<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">}</span> # 注意加的位置在<span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span>和<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span>前后<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>文字自动换行</p><p>还在研究中，相关链接<a href="%5Blatex%E8%A1%A8%E6%A0%BC%E4%B8%AD%E5%86%85%E5%AE%B9%E8%BF%87%E5%A4%9A%E5%A6%82%E4%BD%95%E6%8D%A2%E8%A1%8C%E3%80%90%E5%B7%B2%E8%A7%A3%E5%86%B3%E3%80%91%5D(https://blog.csdn.net/qq_43604183/article/details/134739083?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-134739083-blog-121678328.235%5Ev43%5Epc_blog_bottom_relevance_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-134739083-blog-121678328.235%5Ev43%5Epc_blog_bottom_relevance_base3)">^2</a></p></li></ol><h3 id="2-图片">2. 图片</h3><ol><li>单栏与双栏图片<a href="%5BLatex%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%E6%8F%92%E5%85%A5%E5%8D%95%E6%A0%8F%E5%9B%BE%E7%89%87%E5%92%8C%E5%8F%8C%E6%A0%8F%E5%9B%BE%E7%89%87%E6%96%B9%E6%B3%95%5D(https://blog.csdn.net/Time_Memory_cici/article/details/129381838)">^4</a></li></ol><p>单栏</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">figure</span><span class="token punctuation">}</span>...<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">figure</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>双栏</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">figure*</span><span class="token punctuation">}</span>...<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">figure*</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="参考链接">参考链接</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行楷注意事项</title>
      <link href="/2024/01/21/sheng-huo/xie-zi-zhu-yi-dian/"/>
      <url>/2024/01/21/sheng-huo/xie-zi-zhu-yi-dian/</url>
      
        <content type="html"><![CDATA[<h1>行楷注意事项</h1><h2 id="1-手指发力">1. 手指发力</h2><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202401211523108.webp" alt="img"></p><p>先调整坐姿：双脚落地，上身保持挺直，略微前倾，以便观察字的布局；头部端正，保证视线的角度不发生偏移。</p><p><strong>轻松握笔，不要太用力。手腕呈自然直线状态，切忌内弯。</strong></p><p>书写本稍微左倾，这个角度多大合适呢？和地轴倾斜的角度保持差不多大小是符合人挺工程学的，这个角度准确数字是23.26°，那么我们本子的倾斜角度在10°-30°之间是合适的，这符合人与自然和谐统一的大规则，太直了写字久了容易累，角度太大容易造成身体前倾，会影响脊椎发育。</p><p><strong>手指、手腕发力点详解：</strong></p><p>此时手腕应该是外侧贴于纸面，保持一个舒展的姿态，同样根据自己的舒适度灵活调整。</p><p><strong>横的发力点在手腕</strong>，主要靠手腕摆动，手部四个触笔点保持被动受力带动笔运动，水平摆腕写出横。</p><p><strong>竖的发力点主要在食指</strong>，食指指尖下推笔杆，拇指指尖轻触笔杆，拇指关节弯曲迎接食指下推力，中指触笔点抵住笔杆向下配合食指推力，让笔保持直线下行。</p><p><strong>捺的发力点是拇指、食指指尖同时向右下发力</strong>，逐渐加重用力，至捺末端，改变方向向右平出。</p><p><strong>提的发力点在中指</strong>，中指第一关节触笔点向右上推动笔杆，拇指关节由曲变伸、食指配合向上，长提要有腕部发力来配合。</p><p>注意到无论哪种形式，大拇指均未发力，只起到方向的作用。</p><h2 id="参考链接">参考链接</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/163566330#:~:text=%E6%A8%AA%E7%9A%84%E5%8F%91%E5%8A%9B%E7%82%B9%E5%9C%A8%E6%89%8B%E8%85%95%20%EF%BC%8C%E4%B8%BB%E8%A6%81%E9%9D%A0%E6%89%8B%E8%85%95%E6%91%86%E5%8A%A8%EF%BC%8C%E6%89%8B%E9%83%A8%E5%9B%9B%E4%B8%AA%E8%A7%A6%E7%AC%94%E7%82%B9%E4%BF%9D%E6%8C%81%E8%A2%AB%E5%8A%A8%E5%8F%97%E5%8A%9B%E5%B8%A6%E5%8A%A8%E7%AC%94%E8%BF%90%E5%8A%A8%EF%BC%8C%E6%B0%B4%E5%B9%B3%E6%91%86%E8%85%95%E5%86%99%E5%87%BA%E6%A8%AA%E3%80%82%20%E7%AB%96%E7%9A%84%E5%8F%91%E5%8A%9B%E7%82%B9%E4%B8%BB%E8%A6%81%E5%9C%A8%E9%A3%9F%E6%8C%87,%EF%BC%8C%E9%A3%9F%E6%8C%87%E6%8C%87%E5%B0%96%E4%B8%8B%E6%8E%A8%E7%AC%94%E6%9D%86%EF%BC%8C%E6%8B%87%E6%8C%87%E6%8C%87%E5%B0%96%E8%BD%BB%E8%A7%A6%E7%AC%94%E6%9D%86%EF%BC%8C%E6%8B%87%E6%8C%87%E5%85%B3%E8%8A%82%E5%BC%AF%E6%9B%B2%E8%BF%8E%E6%8E%A5%E9%A3%9F%E6%8C%87%E4%B8%8B%E6%8E%A8%E5%8A%9B%EF%BC%8C%E4%B8%AD%E6%8C%87%E8%A7%A6%E7%AC%94%E7%82%B9%E6%8A%B5%E4%BD%8F%E7%AC%94%E6%9D%86%E5%90%91%E4%B8%8B%E9%85%8D%E5%90%88%E9%A3%9F%E6%8C%87%E6%8E%A8%E5%8A%9B%EF%BC%8C%E8%AE%A9%E7%AC%94%E4%BF%9D%E6%8C%81%E7%9B%B4%E7%BA%BF%E4%B8%8B%E8%A1%8C%E3%80%82%20%E6%8D%BA%E7%9A%84%E5%8F%91%E5%8A%9B%E7%82%B9%E6%98%AF%E6%8B%87%E6%8C%87%E3%80%81%E9%A3%9F%E6%8C%87%E6%8C%87%E5%B0%96%E5%90%8C%E6%97%B6%E5%90%91%E5%8F%B3%E4%B8%8B%E5%8F%91%E5%8A%9B%20%EF%BC%8C%E9%80%90%E6%B8%90%E5%8A%A0%E9%87%8D%E7%94%A8%E5%8A%9B%EF%BC%8C%E8%87%B3%E6%8D%BA%E6%9C%AB%E7%AB%AF%EF%BC%8C%E6%94%B9%E5%8F%98%E6%96%B9%E5%90%91%E5%90%91%E5%8F%B3%E5%B9%B3%E5%87%BA%E3%80%82">知乎</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 练字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2024/01/21/markdown/markdown-yu-fa/"/>
      <url>/2024/01/21/markdown/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1>Markdown语法</h1><h2 id="1-Markdown优势">1 Markdown优势</h2><ul><li>相对于word，操作方便，打开迅速</li><li>主题丰富，较为美观</li></ul><h2 id="2-Markdown语法">2 Markdown语法</h2><h3 id="1-脚注，尾注">1 脚注，尾注</h3><p>参考文章[^1]</p><p><strong>1.脚注，尾注</strong>：主要用于注释说明内容 (参看<a href="https://link.zhihu.com/?target=https%3A//www.imooc.com/wiki/markdownlesson/markdownfootnote.html%23%3A~%3Atext%3D%E5%86%99%E5%88%B0%E6%96%87%E7%AB%A0%E6%9C%AB%E5%B0%BE%E3%80%82-%2C3.%20%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%AE%9E%E4%BE%8B%2C-%E5%AE%9E%E4%BE%8B%204%EF%BC%9A">使用场景</a>)。脚注/尾注的特点是可以在页面中来回跳转。</p><p>示例：</p><p>这是一个链接到谷歌的<a href="http://www.google.com">^脚注</a>。</p><p>源码：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">这是一个链接到谷歌的[^脚注]。[^脚注]: http://www.google.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202401211224018.webp" alt="img"></p><h3 id="2-引用链接">2 引用链接</h3><p>两部分：</p><ul><li>引用文本</li><li>引用主体</li></ul><p>引用文本格式：<code>[显示文字][引用标签]</code></p><p>引用主体格式：<code>[引用标签]: &lt;链接地址&gt; (链接可选标题)</code>(参看主体格式说明<a href="https://zhuanlan.zhihu.com/p/499137261/%E4%BB%A5%E4%B8%8B%E7%A4%BA%E4%BE%8B%E6%A0%BC%E5%BC%8F%E5%AF%B9%E4%BA%8E**%E5%BC%95%E7%94%A8%E4%B8%BB%E4%BD%93%E6%A0%BC%E5%BC%8F**%E6%95%88%E6%9E%9C%E7%9B%B8%E5%90%8C%EF%BC%9A">^1</a>)</p><p>示例：</p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p><p>一般链接放置位置末尾，便于统一管理。</p><p>源码：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].  [1]: http://google.com/        "Google" [2]: http://search.yahoo.com/  "Yahoo Search" [3]: http://search.msn.com/    "MSN Search"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接">参考链接</h2><p>[^1]:<a href="https://zhuanlan.zhihu.com/p/499137261">Markdown写作 | 尾注,脚注和引用链接的正确使用</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> Markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2024/01/21/bo-ke/bo-ke-da-jian/"/>
      <url>/2024/01/21/bo-ke/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h1>Hexo笔记搭建记录文档</h1><h2 id="一-Hexo网站的优势">一 Hexo网站的优势</h2><p>博客平台如CSDN，博客园，简书等平台，用户可以直接在上面发表，缺点是比较不自由，会受到平台的各种限制和恶心的广告。</p><p>购买域名和服务器成本太高了，花力气去自己搭这么一个网站，还要定期的维护它，成本精力较大。</p><p>那么就有第三种选择，直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h2 id="二-环境配置">二 环境配置</h2><p>参考链接<a href="%5B%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/sinat_37781304/article/details/82729029?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168845286916800222814197%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168845286916800222814197&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82729029-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&amp;utm_term=hexo&amp;spm=1018.2226.3001.4449)">^1</a></p><p>常见命令</p><ol><li>Create a new post</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><ol start="2"><li>Run server</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><ol start="3"><li>Generate static files</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><ol start="4"><li>Deploy to remote sites</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-文章加密">三 文章加密</h2><p>有些文章需要设置为私密，此时需要为文章添加密码。<a href="%5BHexo%E5%8D%9A%E6%96%87%E5%8A%A0%E5%AF%86%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93%5D(https://blog.csdn.net/qq_24754061/article/details/106569222)">^3</a></p><ol><li>安装插件hexo-blog-encrypt：</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git">npm install –save hexo-blog-encrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>然后在hexo全局配置文件_config.yml 中启用该插件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Security</span><span class="token key atrule">encrypt</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在需要加密的文章头部添加所要求的字段，如：password，abstract，message等。</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: 文章加密date: <span class="token number">2020</span>-06-04 <span class="token number">9</span>:46:03password: 程序员在旅途abstract: 这是一篇加密博文，请输入密码后查看message: 这里需要密码才能访问。wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题">* 常见问题</h2><h3 id="1-npm下载报错npm-ERR-code-ETIMEDOUT-npm-ERR">1. npm下载报错npm ERR! code ETIMEDOUT npm ERR!</h3><p>主要是网络配置问题[^2]</p><ol><li>查看npm镜像设置</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm config <span class="token keyword">get</span> registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>将npm设置为淘宝镜像</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>再次查看npm镜像设置</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm config <span class="token keyword">get</span> registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考链接">参考链接</h2><p>[^2]: <a href="https://blog.csdn.net/m0_46695182/article/details/127846670">npm下载报错npm ERR!</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> Markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DQN笔记</title>
      <link href="/2023/07/21/dqn-bi-ji/dqn-bi-ji/"/>
      <url>/2023/07/21/dqn-bi-ji/dqn-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h1><p>DQN两个因素</p><p> DQN 有一个记忆库用于学习之前的经历. 在之前的简介影片中提到过, Q learning 是一种 off-policy 离线学习法, 它能学习当前经历着的, 也能学习过去经历过的, 甚至是学习别人的经历. 所以每次 DQN 更新的时候, 我们都可以随机抽取一些之前的经历进行学习. 随机抽取这种做法打乱了经历之间的相关性, 也使得神经网络更新更有效率. Fixed Q-targets 也是一种打乱相关性的机理, 如果使用 fixed Q-targets, 我们就会在 DQN 中使用到两个结构相同但参数不同的神经网络, 预测 Q 估计 的神经网络具备最新的参数, 而预测 Q 现实 的神经网络使用的参数则是很久以前的. 有了这两种提升手段, DQN 才能在一些游戏中超越人类.</p><h2 id="2-程序运行"><a href="#2-程序运行" class="headerlink" title="2. 程序运行"></a>2. 程序运行</h2><p>安装TensorFlow</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> <span class="token assign-left variable">tensorflow</span><span class="token operator">==</span><span class="token number">1.0</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将脚本中<code>output_graph=True</code>设置后</p><p>运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tensorboard <span class="token parameter variable">--logdir</span><span class="token operator">=</span>logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用手册</title>
      <link href="/2023/07/21/git/git-shi-yong-shou-ce/"/>
      <url>/2023/07/21/git/git-shi-yong-shou-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="一-安装">一 安装</h2><p>Linux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>WIndows</p><p>“Git”-&gt;“Git Bash”</p><h3 id="1-1-配置">1.1 配置</h3><p>分布式版本控制，所有机器自报家门</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h3 id="1-2-私有数据库下载权限设置">1.2 私有数据库下载权限设置</h3><p>如果需要下载私有仓库内容，需要将SSH添加至远程库中，获取相应权限后，方可克隆文件。</p><p>你可以按如下命令来生成 sshkey:</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t ed25519 -C "xxxxx@xxxxx.com"  # Generating public/private ed25519 key pair...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：这里的 <code>xxxxx@xxxxx.com</code> 只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱。<br>现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。</p></blockquote><p>按照提示完成三次回车，即可生成 ssh key。通过查看 <code>~/.ssh/id_ed25519.pub</code> 文件内容，获取到你的 public key</p><blockquote><p>注意:</p><p>不同的電腦公钥的位置可能不同。公钥所在的位置根据在生成公钥的命令行提示内容处获取【见下图】</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cat ~/.ssh/id_ed25519.pub# ssh-ed25519 AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537110.png" alt="SSH生成"></p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537112.png" alt="image-20220630163316806"></p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537113.png" alt="输入图片说明"></p><p>复制生成后的 ssh key，通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中。</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537114.png" alt="添加部署公钥"></p><p>添加后，在终端（Terminal）中输入</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回 <code>Hi XXX! You've successfully authenticated, but Gitee.com does not provide shell access.</code> 内容，则证明添加成功。</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537115.png" alt="SSH添加提示"></p><p>添加成功后，就可以使用SSH协议对仓库进行操作了。</p><h3 id="1-3-仓库公钥和可部署公钥">1.3 仓库公钥和可部署公钥</h3><p>为了便于用户在多个项目仓库下使用一套公钥，免于重复部署和管理的繁琐，Gitee 推出了「可部署公钥」功能，支持在一个仓库空间下使用当前账户名下/参与的另一个仓库空间的部署公钥，实现公钥共用。</p><h3 id="1-4-个人公钥">1.4 个人公钥</h3><p>添加个人公钥后，对于所有的仓库都有读写权限。</p><h2 id="二-版本库">二 版本库</h2><p>版本库又名仓库，英文名<strong>repository</strong>。可以简单理解成一个目录。</p><p>Git仓库表示该目录下所有文件都被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><ol><li>创建空目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> learngit<span class="token builtin class-name">cd</span> learngit<span class="token builtin class-name">pwd</span>/Users/michael/learngit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文</p></blockquote><ol start="2"><li>将目录变为Git可管理的仓库</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> initInitialized empty Git repository <span class="token keyword">in</span> /Users/michael/learngit/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成创建。</p><p>其中，初始化后目录下增加<code>.git</code>目录。该目录用于跟踪管理版本库的。千万不能修改</p><ol start="3"><li><p>文件添加至版本库</p><blockquote><p>所有版本控制系统，只能跟踪文件的改动，比如TXT、网页、程序代码</p><p>图片、视频二进制文件无法追踪文件变化。其中Word也是二进制格式。</p></blockquote><p>其中，文件添加至版本库分两步：添加与提交</p><ol><li>用命令<code>git add</code>告诉Git，把文件添加到仓库：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>用命令<code>git commit</code>告诉Git，把文件提交到仓库：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"wrote a readme file"</span><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> eaadf4e<span class="token punctuation">]</span> wrote a readme <span class="token function">file</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，用于从历史记录里方便地找到改动记录。</p><p>也可以不输入<code>-m "xxx"</code>，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><p><strong>分为两步的原因</strong></p><p>add添加可以每次添加不同的文件，根据自己改的文件进行添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> file1.txt$ <span class="token function">git</span> <span class="token function">add</span> file2.txt file3.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>commit一次提交所有更改文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add 3 files."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="三-版本回退">三 版本回退</h2><h3 id="3-1-相关操作">3.1 相关操作</h3><ol><li><p>随时查看仓库状态</p><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态</p><p>若修改readme.txt文件，改成如下内容：</p><pre class="line-numbers language-none"><code class="language-none">Git is a distributed version control system.Git is free software.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，运行<code>git status</code>命令看看结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   readme.txtno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p></li><li><p>查看修改内容</p><p>如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用<code>git diff</code>这个命令看看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> readme.txt <span class="token function">diff</span> <span class="token parameter variable">--git</span> a/readme.txt b/readme.txtindex 46d49bf<span class="token punctuation">..</span>9247db6 <span class="token number">100644</span>--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@<span class="token parameter variable">-Git</span> is a version control system.+Git is a distributed version control system. Git is <span class="token function">free</span> software.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交修改</p><p>同样为添加与提交两步</p><p>第一步是<code>git add</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>modified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git status</code>显示：将要被提交的修改包括<code>readme.txt</code>，下一步，就可以放心地提交了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add distributed"</span><span class="token punctuation">[</span>master e475afc<span class="token punctuation">]</span> <span class="token function">add</span> distributed <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p></li></ol><h3 id="3-2-版本快照">3.2 版本快照</h3><p>类似游戏的手动存盘。每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。</p><p>快照的作用为：一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><h4 id="举例">举例</h4><p>版本1：wrote a readme file</p><pre class="line-numbers language-none"><code class="language-none">Git is a version control system.Git is free software.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>版本2：add distributed</p><pre class="line-numbers language-none"><code class="language-none">Git is a distributed version control system.Git is free software.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>版本3：append GPL</p><pre class="line-numbers language-none"><code class="language-none">Git is a distributed version control system.Git is free software distributed under the GPL.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查看之间快照">查看之间快照</h5><p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，</p><p>在Git中，我们可用<code>git log</code>命令查看修改历史记录，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> logcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span>Author: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">21</span>:06:15 <span class="token number">2018</span> +0800    append GPLcommit e475afc93c209a690c39c13a46716e8fa000c366Author: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">21</span>:03:36 <span class="token number">2018</span> +0800    <span class="token function">add</span> distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">20</span>:59:18 <span class="token number">2018</span> +0800    wrote a readme <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git log</code>命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次是<code>wrote a readme file</code>。</p><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline1094adb7b9b3807259d8cb349e7df1d4d6477073 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> append GPLe475afc93c209a690c39c13a46716e8fa000c366 <span class="token function">add</span> distributedeaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前面一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号）。</p><p>Git的<code>commit id</code>不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示。</p><p>为什么<code>commit id</code>需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。</p><h5 id="回退快照">回退快照</h5><p>我们准备把<code>readme.txt</code>回退到上一个版本，也就是<code>add distributed</code>的那个版本，怎么做呢？</p><ol><li>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</li><li>把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^HEAD is now at e475afc <span class="token function">add</span> distributed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>--hard</code>参数有啥意义？这个后面再讲，现在你先放心使用。</p><p>看看<code>readme.txt</code>的内容是不是版本<code>add distributed</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> readme.txtGit is a distributed version control system.Git is <span class="token function">free</span> software.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>果然被还原了。</p><p>让我们用<code>git log</code>再看看现在版本库的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> logcommit e475afc93c209a690c39c13a46716e8fa000c366 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span>Author: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">21</span>:03:36 <span class="token number">2018</span> +0800    <span class="token function">add</span> distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">20</span>:59:18 <span class="token number">2018</span> +0800    wrote a readme <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在未关闭命令行界面的情况下，回到最新的版本</li></ol><p>查看log发现最新的那个版本<code>append GPL</code>已经看不到了！但如何回到最新状态？</p><p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是就可以指定回到未来的某个版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 1094aHEAD is now at 83b0afe append GPL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再小心翼翼地看看<code>readme.txt</code>的内容：</p><pre class="line-numbers language-none"><code class="language-none">$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌────┐│HEAD│└────┘   │   └──&gt; ○ append GPL        │        ○ add distributed        │        ○ wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为指向<code>add distributed</code>：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌────┐│HEAD│└────┘   │   │    ○ append GPL   │    │   └──&gt; ○ add distributed        │        ○ wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><ol start="4"><li><p>在关闭命令行界面的情况下，回到最新的版本：使用 <code>git reflog</code></p><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，当用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。</p><p>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> refloge475afc HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: reset: moving to HEAD^1094adb <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: commit: append GPLe475afc HEAD@<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>: commit: <span class="token function">add</span> distributedeaadf4e HEAD@<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span>: commit <span class="token punctuation">(</span>initial<span class="token punctuation">)</span>: wrote a readme <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出可知，<code>append GPL</code>的commit id是<code>1094adb</code>。</p><h3 id="3-3-Git修改文件原理">3.3 Git修改文件原理</h3><h4 id="1-工作区（Working-Directory）">1. 工作区（Working Directory）</h4><p>就是你在电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537116.png" alt="working-dir"></p><h4 id="2-版本库（Repository）">2. 版本库（Repository）</h4><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西。</p><p>其中最重要的就是称为stage（或者叫index）的暂存区。</p><p>还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><h4 id="Git分区示意图">Git分区示意图</h4><p>Git主要可以分为工作区、暂存区与分支。其中暂存区与分支存放在版本库中。</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537117.jpeg" alt="git-repo"></p><h4 id="具体联系">具体联系</h4><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步<code>git add</code>：实际上就是把文件修改添加到暂存区；</p><p>第二步<code>git commit</code>：实际上就是把暂存区的所有内容提交到当前分支。</p><p>当我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支。所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>即两次过程为1.将需要提交的文件修改通通放到暂存区  2 .一次性提交暂存区的所有修改。</p><h4 id="举例-2">举例</h4><ol><li><p>工作区内容修改</p><p>先对<code>readme.txt</code>做个修改，比如加上一行内容：</p></li></ol><pre class="line-numbers language-none"><code class="language-none">Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p><p>先用<code>git status</code>查看一下状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   readme.txtUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>LICENSEno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p><ol start="2"><li><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage）。</li></ol><p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>new file:   LICENSEmodified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，暂存区的状态就变成这样了：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537118.jpeg" alt="git-stage"></p><ol start="3"><li>执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"understand how stage works"</span><span class="token punctuation">[</span>master e43a48b<span class="token punctuation">]</span> understand how stage works <span class="token number">2</span> files changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> LICENSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在版本库变成了这样，暂存区就没有任何内容了：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537119.jpeg" alt="git-stage-after-commit"></p><h4 id="Git管理原理">Git管理原理</h4><p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。其中，工作区存储文件，暂存区存储相应修改。即只修改工作区而不提交暂存区，Git将无法管理。</p><h5 id="什么是修改？">什么是修改？</h5><p>比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改</p><h5 id="举例-3">举例</h5><p>第一步，对readme.txt做一个修改，比如加一行内容：</p><pre class="line-numbers language-none"><code class="language-none">$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt$ <span class="token function">git</span> status<span class="token comment"># On branch master</span><span class="token comment"># Changes to be committed:</span><span class="token comment">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span><span class="token comment">#</span><span class="token comment">#       modified:   readme.txt</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，再修改readme.txt：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> readme.txt Git is a distributed version control system.Git is <span class="token function">free</span> software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时不将文件修改后内容放置暂存区，直接提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"git tracks changes"</span><span class="token punctuation">[</span>master 519219b<span class="token punctuation">]</span> <span class="token function">git</span> tracks changes <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>提交后，再看看状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   readme.txtno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们回顾一下操作过程：第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code>。发现第二次的修改没有被提交？</p><p>原因为Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>最后，使用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> HEAD -- readme.txt <span class="token function">diff</span> <span class="token parameter variable">--git</span> a/readme.txt b/readme.txtindex 76d770f<span class="token punctuation">..</span>a9c5755 <span class="token number">100644</span>--- a/readme.txt+++ b/readme.txt@@ -1,4 +1,4 @@ Git is a distributed version control system. Git is <span class="token function">free</span> software distributed under the GPL. Git has a mutable index called stage.<span class="token parameter variable">-Git</span> tracks changes.+Git tracks changes of files.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那怎么提交第二次修改呢？</p><p>可以继续<code>git add</code>再<code>git commit</code>；</p><p>也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p><h3 id="撤销修改">撤销修改</h3><h5 id="情景1：丢弃工作区修改：git-checkout-–-file">情景1：丢弃工作区修改：git checkout – file</h5><p>想象场景，你在<code>readme.txt</code>中添加了一行：</p><pre class="line-numbers language-none"><code class="language-none">$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.My stupid boss still prefers SVN.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你准备提交前，一杯咖啡起了作用，你猛然发现了<code>stupid boss</code>可能会让你丢掉这个月的奖金！</p><p>既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用<code>git status</code>查看一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   readme.txtno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以发现，Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="丢弃修改">丢弃修改</h6><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销。</p><p>这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>现在，看看<code>readme.txt</code>的文件内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> readme.txtGit is a distributed version control system.Git is <span class="token function">free</span> software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件内容果然复原了。</p><p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p><h5 id="情景2：丢弃暂存区修改：git-reset-HEAD-file">情景2：丢弃暂存区修改：git reset HEAD &lt;file&gt;</h5><p>现在假定是凌晨3点，你不但写了一些胡话，还<code>git add</code>到暂存区了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> readme.txtGit is a distributed version control system.Git is <span class="token function">free</span> software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.My stupid boss still prefers SVN.$ <span class="token function">git</span> <span class="token function">add</span> readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>庆幸的是，在<code>commit</code>之前，你发现了这个问题。用<code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>modified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Git同样告诉我们，用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset HEAD readme.txtUnstaged changes after reset:Mreadme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>再用<code>git status</code>查看一下，现在暂存区是干净的，工作区有修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还记得如何丢弃工作区的修改吗？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -- readme.txt$ <span class="token function">git</span> statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个世界终于清静了！</p><h5 id="情景3：丢弃本地分支修改：git-reset-HEAD-readme-txt">情景3：丢弃本地分支修改：git reset HEAD readme.txt</h5><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？</p><p>还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把<code>stupid boss</code>提交推送到远程版本库，你就真的惨了……</p><h3 id="删除文件">删除文件</h3><h4 id="正常删除">正常删除</h4><p>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件<code>test.txt</code>到Git并且提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> test.txt$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add test.txt"</span><span class="token punctuation">[</span>master b84166e<span class="token punctuation">]</span> <span class="token function">add</span> test.txt <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add/rm &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>deleted:    test.txtno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">rm</span> test.txt<span class="token function">rm</span> <span class="token string">'test.txt'</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"remove test.txt"</span><span class="token punctuation">[</span>master d46f35e<span class="token punctuation">]</span> remove test.txt <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span> delete mode <span class="token number">100644</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，文件就从版本库中被删除了。</p><blockquote><p>小提示：先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。</file></file></p></blockquote><h4 id="误删文件后恢复">误删文件后恢复</h4><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -- test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p>注意：从来没有被添加到版本库就被删除的文件，是无法恢复的</p><h2 id="四-远程仓库">四 远程仓库</h2><h3 id="4-1-远程仓库">4.1 远程仓库</h3><p>远程仓库的作用是一方面防止本地硬盘损坏而导致项目代码丢失，另一方面方便多人对于同一工程文件的修改与完善。</p><p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</p><p>你肯定会想，至少需要两台机器才能玩远程库不是？但是我只有一台电脑，怎么玩？</p><p>其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。</p><p>不过，现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库。</p><p>实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p><p>完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫<a href="https://github.com/">GitHub</a>的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p><p>在继续阅读后续内容前，请自行注册GitHub账号。</p><h4 id="1-设置Git秘钥">1 设置Git秘钥</h4><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p><p>第1步：创建SSH Key。</p><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537120.png" alt="github-addkey-1"></p><p>点“Add Key”，你就应该看到已经添加的Key：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537121.png" alt="github-addkey-2"></p><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p><p>确保你拥有一个GitHub账号后，我们就即将开始远程仓库的操作。</p><h3 id="4-2-添加远程库">4.2 添加远程库</h3><p>你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</p><h5 id="1-步骤">1 步骤</h5><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021631860000/0" alt="github-create-repo-1"></p><p>在Repository name填入<code>learngit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537122.png" alt="github-create-repo-2"></p><p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:michaelliao/learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请千万注意，把上面的<code>michaelliao</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，==远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。==</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin masterCounting objects: <span class="token number">20</span>, done.Delta compression using up to <span class="token number">4</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">15</span>/15<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">20</span>/20<span class="token punctuation">)</span>, <span class="token number">1.64</span> KiB <span class="token operator">|</span> <span class="token number">560.00</span> KiB/s, done.Total <span class="token number">20</span> <span class="token punctuation">(</span>delta <span class="token number">5</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">5</span>/5<span class="token punctuation">)</span>, done.To github.com:michaelliao/learngit.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">&gt;</span> masterBranch <span class="token string">'master'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'master'</span> from <span class="token string">'origin'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537123.png" alt="github-repo"></p><p>从现在起，只要本地作了提交，就可以通过命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h4 id="2-SSH警告">2 SSH警告</h4><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><pre class="line-numbers language-none"><code class="language-none">The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.RSA key fingerprint is xx.xx.xx.xx.xx.Are you sure you want to continue connecting (yes/no)?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><pre class="line-numbers language-none"><code class="language-none">Warning: Permanently added 'github.com' (RSA) to the list of known hosts.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p><h3 id="4-3-删除远程库">4.3 删除远程库</h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>origin  git@github.com:michaelliao/learn-git.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin  git@github.com:michaelliao/learn-git.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，根据名字删除，比如删除<code>origin</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">rm</span> origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h3 id="4-4-克隆远程库">4.4 克隆远程库</h3><p>以上内容为先有本地库，后有远程库的时候，如何关联远程库。</p><p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><p>首先，登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537124.png" alt="github-init-repo"></p><p>我们勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到<code>README.md</code>文件：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537125.png" alt="github-init-repo-2"></p><p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone git@github.com:michaelliao/gitskills.gitCloning into <span class="token string">'gitskills'</span><span class="token punctuation">..</span>.remote: Counting objects: <span class="token number">3</span>, done.remote: Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">3</span>Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意把Git库的地址换成你自己的，然后进入<code>gitskills</code>目录看看，已经有<code>README.md</code>文件了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> gitskills$ <span class="token function">ls</span>README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p><p>你也许还注意到，GitHub给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code></p><h3 id="4-5-查看远程仓库">4.5 查看远程仓库</h3><p>查看本地仓库连接的远程仓库</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五-分支管理">五 分支管理</h2><h3 id="5-1分支管理">5.1分支管理</h3><h4 id="1-应用场景">1 应用场景</h4><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537126.png" alt="learn-branches"></p><p>开发新功能但未完成。</p><p>立刻提交不完整的代码库导致别人无法继续工作</p><p>不提交存在丢失进度风险</p><h4 id="2-解决方式">2 解决方式</h4><p>建立自己分支，别人看不到。自己在自己分支工作。直至开发完毕后提交至原有分支</p><p>无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件</p><h3 id="5-2-创建合并分支">5.2 创建合并分支</h3><h4 id="1-分支原理">1 分支原理</h4><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。</p><p>截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。</p><p><code>HEAD</code>指向<code>master</code>，而<code>master</code>才是指向提交的。即<code>HEAD</code>指向的为当前分支。</p><p>起初，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>。这样就能确定当前分支，以及当前分支的提交点：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537127.png" alt="git-br-initial"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537128.png" alt="git-br-create"></p><blockquote><p>注意：每次从远程库克隆的分支均为master分支</p></blockquote><h5 id="创建分支">创建分支</h5><p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537129.png" alt="git-br-dev-fd"></p><h5 id="合并分支">合并分支</h5><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537130.png" alt="git-br-ff-merge"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><h5 id="删除分支">删除分支</h5><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537131.png" alt="git-br-rm"></p><h4 id="2-实例">2 实例</h4><p>下面开始实战。</p><h5 id="（1）创建分支">（1）创建分支</h5><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> devSwitched to a new branch <span class="token string">'dev'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch dev   <span class="token comment">#建立分支</span>$ <span class="token function">git</span> checkout dev  <span class="token comment">#切换分支</span>Switched to branch <span class="token string">'dev'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="（2）查看分支状态">（2）查看分支状态</h5><p>然后，用<code>git branch</code>命令查看当前分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch* dev  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Creating a new branch is quick.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt $ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"branch test"</span><span class="token punctuation">[</span>dev b17d20e<span class="token punctuation">]</span> branch <span class="token builtin class-name">test</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout masterSwitched to branch <span class="token string">'master'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537132.png" alt="git-br-on-master"></p><h5 id="合并分支-2">合并分支</h5><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> merge devUpdating d46f35e<span class="token punctuation">..</span>b17d20eFast-forward readme.txt <span class="token operator">|</span> <span class="token number">1</span> + <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==<code>git merge</code>命令用于合并指定分支到当前分支。==</p><p>合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p><h5 id="删除分支-2">删除分支</h5><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> devDeleted branch dev <span class="token punctuation">(</span>was b17d20e<span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h4 id="3-分支切换">3 分支切换</h4><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</p><p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p><p>创建并切换到新的<code>dev</code>分支，可以使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch <span class="token parameter variable">-c</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接切换到已有的<code>master</code>分支，可以使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p><h4 id="4-重要知识点小结">4 重要知识点小结</h4><p>Git鼓励大量使用分支：</p><p>从远程库克隆指定分支到本地（以test为例）：<code>git checkout -b test origin/test</code></p><p>作用是checkout远程的test分支，在本地起名为test分支，并切换到本地的test分支</p><p>查看本地分支：<code>git branch</code></p><p>查看所有分支（本地和远程）：<code>git branch -a</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code><strong>推荐使用switch方法。</strong></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code>。<strong>推荐使用switch方法。</strong></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code>    强制删除<code>git branch -D &lt;name&gt;</code></p><h2 id="六-解决分支冲突">六 解决分支冲突</h2><h4 id="分支冲突情况">分支冲突情况</h4><p>当两个分支对相同的文件做处理时，产生分支冲突。</p><p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch <span class="token parameter variable">-c</span> feature1Switched to a new branch <span class="token string">'feature1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改<code>readme.txt</code>最后一行，改为：</p><pre class="line-numbers language-none"><code class="language-none">Creating a new branch is quick AND simple.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>feature1</code>分支上提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"AND simple"</span><span class="token punctuation">[</span>feature1 14096d0<span class="token punctuation">]</span> AND simple <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换到<code>master</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch masterSwitched to branch <span class="token string">'master'</span>Your branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">1</span> commit.  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p><p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p><pre class="line-numbers language-none"><code class="language-none">Creating a new branch is quick &amp; simple.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt $ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"&amp; simple"</span><span class="token punctuation">[</span>master 5dc6824<span class="token punctuation">]</span> <span class="token operator">&amp;</span> simple <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537133.png" alt="git-br-feature1"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> merge feature1Auto-merging readme.txtCONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> readme.txtAutomatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterYour branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">2</span> commits.  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>You have unmerged paths.  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">"git commit"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git merge --abort"</span> to abort the merge<span class="token punctuation">)</span>Unmerged paths:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to mark resolution<span class="token punctuation">)</span>both modified:   readme.txtno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以直接查看readme.txt的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Git is a distributed version control system.Git is <span class="token function">free</span> software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span> HEADCreating a new branch is quick <span class="token operator">&amp;</span> simple.<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Creating a new branch is quick AND simple.<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> feature1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><pre class="line-numbers language-none"><code class="language-none">Creating a new branch is quick and simple.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解决冲突">解决冲突</h4><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容。</p><p>master前进一步</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt $ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"conflict fixed"</span><span class="token punctuation">[</span>master cf810e4<span class="token punctuation">]</span> conflict fixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537134.png" alt="git-br-conflict-merged"></p><p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit*   cf810e4 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> conflict fixed<span class="token operator">|</span><span class="token punctuation">\</span>  <span class="token operator">|</span> * 14096d0 <span class="token punctuation">(</span>feature1<span class="token punctuation">)</span> AND simple* <span class="token operator">|</span> 5dc6824 <span class="token operator">&amp;</span> simple<span class="token operator">|</span>/  * b17d20e branch <span class="token builtin class-name">test</span>* d46f35e <span class="token punctuation">(</span>origin/master<span class="token punctuation">)</span> remove test.txt* b84166e <span class="token function">add</span> test.txt* 519219b <span class="token function">git</span> tracks changes* e43a48b understand how stage works* 1094adb append GPL* e475afc <span class="token function">add</span> distributed* eaadf4e wrote a readme <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>冲突解决即合并完成，此时删除<code>feature1</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature1Deleted branch feature1 <span class="token punctuation">(</span>was 14096d0<span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>工作完成。</p><h3 id="分支管理策略">分支管理策略</h3><h4 id="保留分支信息">保留分支信息</h4><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p><p>首先，仍然创建并切换<code>dev</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch <span class="token parameter variable">-c</span> devSwitched to a new branch <span class="token string">'dev'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改readme.txt文件，并提交一个新的commit：</p><pre class="line-numbers language-none"><code class="language-none">$ git add readme.txt $ git commit -m "add merge"[dev f52c633] add merge 1 file changed, 1 insertion(+)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们切换回<code>master</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch masterSwitched to branch <span class="token string">'master'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> merge --no-ff <span class="token parameter variable">-m</span> <span class="token string">"merge with no-ff"</span> devMerge made by the <span class="token string">'recursive'</span> strategy. readme.txt <span class="token operator">|</span> <span class="token number">1</span> + <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p><p>合并后，我们用<code>git log</code>看看分支历史：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit*   e1e9c68 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> merge with no-ff<span class="token operator">|</span><span class="token punctuation">\</span>  <span class="token operator">|</span> * f52c633 <span class="token punctuation">(</span>dev<span class="token punctuation">)</span> <span class="token function">add</span> merge<span class="token operator">|</span>/  *   cf810e4 conflict fixed<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537135.png" alt="git-no-ff-mode"></p><h4 id="分支策略">分支策略</h4><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p><p>首先，仍然创建并切换<code>dev</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch <span class="token parameter variable">-c</span> devSwitched to a new branch <span class="token string">'dev'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改readme.txt文件，并提交一个新的commit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt $ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add merge"</span><span class="token punctuation">[</span>dev f52c633<span class="token punctuation">]</span> <span class="token function">add</span> merge <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们切换回<code>master</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch masterSwitched to branch <span class="token string">'master'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> merge --no-ff <span class="token parameter variable">-m</span> <span class="token string">"merge with no-ff"</span> devMerge made by the <span class="token string">'recursive'</span> strategy. readme.txt <span class="token operator">|</span> <span class="token number">1</span> + <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p><p>合并后，我们用<code>git log</code>看看分支历史：</p><pre class="line-numbers language-none"><code class="language-none">$ git log --graph --pretty=oneline --abbrev-commit*   e1e9c68 (HEAD -&gt; master) merge with no-ff|\  | * f52c633 (dev) add merge|/  *   cf810e4 conflict fixed...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023225142304/0" alt="git-no-ff-mode"></p><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537136.png" alt="git-br-policy"></p><h3 id="BUG分支">BUG分支</h3><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch devChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>new file:   hello.pyChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> stashSaved working directory and index state WIP on dev: f52c633 <span class="token function">add</span> merge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout masterSwitched to branch <span class="token string">'master'</span>Your branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">6</span> commits.  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> issue-101Switched to a new branch <span class="token string">'issue-101'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> readme.txt $ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"fix bug 101"</span><span class="token punctuation">[</span>issue-101 4c805e2<span class="token punctuation">]</span> fix bug <span class="token number">101</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch masterSwitched to branch <span class="token string">'master'</span>Your branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">6</span> commits.  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>$ <span class="token function">git</span> merge --no-ff <span class="token parameter variable">-m</span> <span class="token string">"merged bug fix 101"</span> issue-101Merge made by the <span class="token string">'recursive'</span> strategy. readme.txt <span class="token operator">|</span> <span class="token number">2</span> +- <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到<code>dev</code>分支干活了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch devSwitched to branch <span class="token string">'dev'</span>$ <span class="token function">git</span> statusOn branch devnothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p><pre class="line-numbers language-none"><code class="language-none">$ git stash liststash@{0}: WIP on dev: f52c633 add merge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> stash popOn branch devChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>new file:   hello.pyChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   readme.txtDropped refs/stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>5d677e2ee266f39ea296182fb2354265b91b3b2a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p><p>那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？</p><p>有木有更简单的方法？</p><p>有！</p><p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。</p><blockquote><p>注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来，因为merge后会将现有修改覆盖而我们只需要修改的一部分</p></blockquote><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch* dev  master$ <span class="token function">git</span> cherry-pick 4c805e2<span class="token punctuation">[</span>master 1d4b803<span class="token punctuation">]</span> fix bug <span class="token number">101</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p><p>有些聪明的童鞋会想了，既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？</p><p>当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从dev分支切换到master分支。</p><h4 id="小结">小结</h4><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h3 id="Feature分支">Feature分支</h3><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p><p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p><p>于是准备开发：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch <span class="token parameter variable">-c</span> feature-vulcanSwitched to a new branch <span class="token string">'feature-vulcan'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5分钟后，开发完毕：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> vulcan.py$ <span class="token function">git</span> statusOn branch feature-vulcanChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>new file:   vulcan.py$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add feature vulcan"</span><span class="token punctuation">[</span>feature-vulcan 287773e<span class="token punctuation">]</span> <span class="token function">add</span> feature vulcan <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> vulcan.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切回<code>dev</code>，准备合并：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> switch dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p><p>但是！</p><p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p><p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature-vulcanerror: The branch <span class="token string">'feature-vulcan'</span> is not fully merged.If you are sure you want to delete it, run <span class="token string">'git branch -D feature-vulcan'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。。</p><p>现在我们强行删除：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch <span class="token parameter variable">-D</span> feature-vulcanDeleted branch feature-vulcan <span class="token punctuation">(</span>was 287773e<span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>终于删除成功！</p><h3 id="多人协作">多人协作</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p><p>要查看远程库的信息，用<code>git remote</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remoteorigin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者，用<code>git remote -v</code>显示更详细的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>origin  git@github.com:michaelliao/learngit.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin  git@github.com:michaelliao/learngit.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><h4 id="推送分支">推送分支</h4><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要推送其他分支，比如<code>dev</code>，就改成：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><h4 id="抓取分支">抓取分支</h4><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone git@github.com:michaelliao/learngit.gitCloning into <span class="token string">'learngit'</span><span class="token punctuation">..</span>.remote: Counting objects: <span class="token number">40</span>, done.remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">21</span>/21<span class="token punctuation">)</span>, done.remote: Total <span class="token number">40</span> <span class="token punctuation">(</span>delta <span class="token number">14</span><span class="token punctuation">)</span>, reused <span class="token number">40</span> <span class="token punctuation">(</span>delta <span class="token number">14</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">40</span>/40<span class="token punctuation">)</span>, done.Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">14</span>/14<span class="token punctuation">)</span>, done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev origin/dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> env.txt$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add env"</span><span class="token punctuation">[</span>dev 7a5e5dd<span class="token punctuation">]</span> <span class="token function">add</span> <span class="token function">env</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> env.txt$ <span class="token function">git</span> push origin devCounting objects: <span class="token number">3</span>, done.Delta compression using up to <span class="token number">4</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">308</span> bytes <span class="token operator">|</span> <span class="token number">308.00</span> KiB/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To github.com:michaelliao/learngit.git   f52c633<span class="token punctuation">..</span>7a5e5dd  dev -<span class="token operator">&gt;</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> env.txt<span class="token function">env</span>$ <span class="token function">git</span> <span class="token function">add</span> env.txt$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add new env"</span><span class="token punctuation">[</span>dev 7bd91f1<span class="token punctuation">]</span> <span class="token function">add</span> new <span class="token function">env</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> env.txt$ <span class="token function">git</span> push origin devTo github.com:michaelliao/learngit.git <span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        dev -<span class="token operator">&gt;</span> dev <span class="token punctuation">(</span>non-fast-forward<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'git@github.com:michaelliao/learngit.git'</span>hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes <span class="token punctuation">(</span>e.g.hint: <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pullThere is no tracking information <span class="token keyword">for</span> the current branch.Please specify <span class="token function">which</span> branch you want to merge with.See git-pull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> details.    <span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span>If you wish to <span class="token builtin class-name">set</span> tracking information <span class="token keyword">for</span> this branch you can <span class="token keyword">do</span> so with:    <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/dev devBranch <span class="token string">'dev'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'dev'</span> from <span class="token string">'origin'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再pull：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pullAuto-merging env.txtCONFLICT <span class="token punctuation">(</span>add/add<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> env.txtAutomatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344">解决冲突</a>完全一样。解决后，提交，再push：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"fix env conflict"</span><span class="token punctuation">[</span>dev 57c53ab<span class="token punctuation">]</span> fix <span class="token function">env</span> conflict$ <span class="token function">git</span> push origin devCounting objects: <span class="token number">6</span>, done.Delta compression using up to <span class="token number">4</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">4</span>/4<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">6</span>/6<span class="token punctuation">)</span>, <span class="token number">621</span> bytes <span class="token operator">|</span> <span class="token number">621.00</span> KiB/s, done.Total <span class="token number">6</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To github.com:michaelliao/learngit.git   7a5e5dd<span class="token punctuation">..</span>57c53ab  dev -<span class="token operator">&gt;</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="Rebase">Rebase</h3><p>在上一节我们看到了，多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p><p>每次合并再push后，分支变成了这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit* d1be385 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master, origin/master<span class="token punctuation">)</span> init hello*   e5e69f1 Merge branch <span class="token string">'dev'</span><span class="token operator">|</span><span class="token punctuation">\</span>  <span class="token operator">|</span> *   57c53ab <span class="token punctuation">(</span>origin/dev, dev<span class="token punctuation">)</span> fix <span class="token function">env</span> conflict<span class="token operator">|</span> <span class="token operator">|</span><span class="token punctuation">\</span>  <span class="token operator">|</span> <span class="token operator">|</span> * 7a5e5dd <span class="token function">add</span> <span class="token function">env</span><span class="token operator">|</span> * <span class="token operator">|</span> 7bd91f1 <span class="token function">add</span> new <span class="token function">env</span><span class="token operator">|</span> <span class="token operator">|</span>/  * <span class="token operator">|</span>   12a631b merged bug fix <span class="token number">101</span><span class="token operator">|</span><span class="token punctuation">\</span> <span class="token punctuation">\</span>  <span class="token operator">|</span> * <span class="token operator">|</span> 4c805e2 fix bug <span class="token number">101</span><span class="token operator">|</span>/ /  * <span class="token operator">|</span>   e1e9c68 merge with no-ff<span class="token operator">|</span><span class="token punctuation">\</span> <span class="token punctuation">\</span>  <span class="token operator">|</span> <span class="token operator">|</span>/  <span class="token operator">|</span> * f52c633 <span class="token function">add</span> merge<span class="token operator">|</span>/  *   cf810e4 conflict fixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？</p><p>其实是可以做到的！</p><p>Git有一种称为rebase的操作，有人把它翻译成“变基”。</p><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202302191537137.jpeg" alt="rebase"></p><p>先不要随意展开想象。我们还是从实际问题出发，看看怎么把分叉的提交变成直线。</p><p>在和远程分支同步后，我们对<code>hello.py</code>这个文件做了两次提交。用<code>git log</code>命令看看：</p><pre class="line-numbers language-none"><code class="language-none">$ git log --graph --pretty=oneline --abbrev-commit* 582d922 (HEAD -&gt; master) add author* 8875536 add comment* d1be385 (origin/master) init hello*   e5e69f1 Merge branch 'dev'|\  | *   57c53ab (origin/dev, dev) fix env conflict| |\  | | * 7a5e5dd add env| * | 7bd91f1 add new env...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到Git用<code>(HEAD -&gt; master)</code>和<code>(origin/master)</code>标识出当前分支的HEAD和远程origin的位置分别是<code>582d922 add author</code>和<code>d1be385 init hello</code>，本地分支比远程分支快两个提交。</p><p>现在我们尝试推送本地分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin masterTo github.com:michaelliao/learngit.git <span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        master -<span class="token operator">&gt;</span> master <span class="token punctuation">(</span>fetch first<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'git@github.com:michaelliao/learngit.git'</span>hint: Updates were rejected because the remote contains work that you <span class="token keyword">do</span>hint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: <span class="token punctuation">(</span>e.g., <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pullremote: Counting objects: <span class="token number">3</span>, done.remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span>, done.remote: Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">1</span><span class="token punctuation">)</span>, reused <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">1</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>Unpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.From github.com:michaelliao/learngit   d1be385<span class="token punctuation">..</span>f005ed4  master     -<span class="token operator">&gt;</span> origin/master * <span class="token punctuation">[</span>new tag<span class="token punctuation">]</span>         v1.0       -<span class="token operator">&gt;</span> v1.0Auto-merging hello.pyMerge made by the <span class="token string">'recursive'</span> strategy. hello.py <span class="token operator">|</span> <span class="token number">1</span> + <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再用<code>git status</code>看看状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterYour branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">3</span> commits.  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>nothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。</p><p>用<code>git log</code>看看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit*   e0ea545 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> Merge branch <span class="token string">'master'</span> of github.com:michaelliao/learngit<span class="token operator">|</span><span class="token punctuation">\</span>  <span class="token operator">|</span> * f005ed4 <span class="token punctuation">(</span>origin/master<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">exit</span><span class="token operator">=</span><span class="token number">1</span>* <span class="token operator">|</span> 582d922 <span class="token function">add</span> author* <span class="token operator">|</span> <span class="token number">8875536</span> <span class="token function">add</span> comment<span class="token operator">|</span>/  * d1be385 init hello<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？</p><p>有！</p><p>什么问题？</p><p>不好看！</p><p>有没有解决方法？</p><p>有！</p><p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> rebaseFirst, rewinding <span class="token function">head</span> to replay your work on <span class="token function">top</span> of it<span class="token punctuation">..</span>.Applying: <span class="token function">add</span> commentUsing index info to reconstruct a base tree<span class="token punctuation">..</span>.Mhello.pyFalling back to patching base and <span class="token number">3</span>-way merge<span class="token punctuation">..</span>.Auto-merging hello.pyApplying: <span class="token function">add</span> authorUsing index info to reconstruct a base tree<span class="token punctuation">..</span>.Mhello.pyFalling back to patching base and <span class="token number">3</span>-way merge<span class="token punctuation">..</span>.Auto-merging hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit* 7e61ed4 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> <span class="token function">add</span> author* 3611cfe <span class="token function">add</span> comment* f005ed4 <span class="token punctuation">(</span>origin/master<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">exit</span><span class="token operator">=</span><span class="token number">1</span>* d1be385 init hello<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p><p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p><p>最后，通过push操作把本地分支推送到远程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Mac:~/learngit michael$ <span class="token function">git</span> push origin masterCounting objects: <span class="token number">6</span>, done.Delta compression using up to <span class="token number">4</span> threads.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">5</span>/5<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">6</span>/6<span class="token punctuation">)</span>, <span class="token number">576</span> bytes <span class="token operator">|</span> <span class="token number">576.00</span> KiB/s, done.Total <span class="token number">6</span> <span class="token punctuation">(</span>delta <span class="token number">2</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, completed with <span class="token number">1</span> <span class="token builtin class-name">local</span> object.To github.com:michaelliao/learngit.git   f005ed4<span class="token punctuation">..</span>7e61ed4  master -<span class="token operator">&gt;</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再用<code>git log</code>看看效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit* 7e61ed4 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master, origin/master<span class="token punctuation">)</span> <span class="token function">add</span> author* 3611cfe <span class="token function">add</span> comment* f005ed4 <span class="token builtin class-name">set</span> <span class="token assign-left variable">exit</span><span class="token operator">=</span><span class="token number">1</span>* d1be385 init hello<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>远程分支的提交历史也是一条直线。</p><h3 id="标签管理">标签管理</h3><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p><p>Git有commit，为什么还要引入tag？</p><p>“请把上周一的那个版本打包发布，commit号是6a5819e…”</p><p>“一串乱七八糟的数字不好找！”</p><p>如果换一个办法：</p><p>“请把上周一的那个版本打包发布，版本号是v1.2”</p><p>“好的，按照tag v1.2查找commit就行！”</p><p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h4 id="创建标签">创建标签</h4><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch* dev  master$ <span class="token function">git</span> checkout masterSwitched to branch <span class="token string">'master'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用命令<code>git tag</code>查看所有标签：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tagv1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p><p>方法是找到历史提交的commit id，然后打上就可以了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit12a631b <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master, tag: v1.0, origin/master<span class="token punctuation">)</span> merged bug fix <span class="token number">101</span>4c805e2 fix bug <span class="token number">101</span>e1e9c68 merge with no-fff52c633 <span class="token function">add</span> mergecf810e4 conflict fixed5dc6824 <span class="token operator">&amp;</span> simple14096d0 AND simpleb17d20e branch <span class="token builtin class-name">test</span>d46f35e remove test.txtb84166e <span class="token function">add</span> test.txt519219b <span class="token function">git</span> tracks changese43a48b understand how stage works1094adb append GPLe475afc <span class="token function">add</span> distributedeaadf4e wrote a readme <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比方说要对<code>add merge</code>这次提交打标签，它对应的commit id是<code>f52c633</code>，敲入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag v0.9 f52c633<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再用命令<code>git tag</code>查看标签：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tagv0.9v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> show v0.9commit f52c63349bc3c1593499807e5c8e972b82c8f286 <span class="token punctuation">(</span>tag: v0.9<span class="token punctuation">)</span>Author: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">21</span>:56:54 <span class="token number">2018</span> +0800    <span class="token function">add</span> merge<span class="token function">diff</span> <span class="token parameter variable">--git</span> a/readme.txt b/readme.txt<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>v0.9</code>确实打在<code>add merge</code>这次提交上。</p><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag <span class="token parameter variable">-a</span> v0.1 <span class="token parameter variable">-m</span> <span class="token string">"version 0.1 released"</span> 1094adb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> show v0.1tag v0.1Tagger: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">22</span>:48:43 <span class="token number">2018</span> +0800version <span class="token number">0.1</span> releasedcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 <span class="token punctuation">(</span>tag: v0.1<span class="token punctuation">)</span>Author: Michael Liao <span class="token operator">&lt;</span>askxuefeng@gmail.com<span class="token operator">&gt;</span>Date:   Fri May <span class="token number">18</span> <span class="token number">21</span>:06:15 <span class="token number">2018</span> +0800    append GPL<span class="token function">diff</span> <span class="token parameter variable">--git</span> a/readme.txt b/readme.txt<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p><h4 id="操作标签">操作标签</h4><p>如果标签打错了，也可以删除：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag <span class="token parameter variable">-d</span> v0.1Deleted tag <span class="token string">'v0.1'</span> <span class="token punctuation">(</span>was f15b0dd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p><p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin v1.0Total <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To github.com:michaelliao/learngit.git * <span class="token punctuation">[</span>new tag<span class="token punctuation">]</span>         v1.0 -<span class="token operator">&gt;</span> v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>Total <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To github.com:michaelliao/learngit.git * <span class="token punctuation">[</span>new tag<span class="token punctuation">]</span>         v0.9 -<span class="token operator">&gt;</span> v0.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag <span class="token parameter variable">-d</span> v0.9Deleted tag <span class="token string">'v0.9'</span> <span class="token punctuation">(</span>was f52c633<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，从远程删除。删除命令也是push，但是格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin :refs/tags/v0.9To github.com:michaelliao/learngit.git - <span class="token punctuation">[</span>deleted<span class="token punctuation">]</span>         v0.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p><h2 id="七-使用GitHub">七 使用GitHub</h2><p>我们一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。</p><p>在GitHub出现以前，开源项目开源容易，但让广大人民群众参与进来比较困难，因为要参与，就要提交代码，而给每个想提交代码的群众都开一个账号那是不现实的，因此，群众也仅限于报个bug，即使能改掉bug，也只能把diff文件用邮件发过去，很不方便。</p><p>但是在GitHub上，利用Git极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目了。</p><p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap%EF%BC%8C%E7%82%B9%E2%80%9CFork%E2%80%9D%E5%B0%B1%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B4%A6%E5%8F%B7%E4%B8%8B%E5%85%8B%E9%9A%86%E4%BA%86%E4%B8%80%E4%B8%AAbootstrap%E4%BB%93%E5%BA%93%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E4%BB%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B4%A6%E5%8F%B7%E4%B8%8Bclone%EF%BC%9A">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</a></p><pre class="line-numbers language-none"><code class="language-none">git clone git@github.com:michaelliao/bootstrap.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p><p>Bootstrap的官方仓库<code>twbs/bootstrap</code>、你在GitHub上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌─ GitHub ────────────────────────────────────┐│                                             ││ ┌─────────────────┐     ┌─────────────────┐ ││ │ twbs/bootstrap  │────&gt;│  my/bootstrap   │ ││ └─────────────────┘     └─────────────────┘ ││                                  ▲          │└──────────────────────────────────┼──────────┘                                   ▼                          ┌─────────────────┐                          │ local/bootstrap │                          └─────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。</p><p>如果你没能力修改bootstrap，但又想要试一把pull request，那就Fork一下我的仓库：<a href="https://github.com/michaelliao/learngit%EF%BC%8C%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%60your-github-id.txt%60%E7%9A%84%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%86%99%E7%82%B9%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0Git%E7%9A%84%E5%BF%83%E5%BE%97%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8E%A8%E9%80%81%E4%B8%80%E4%B8%AApull">https://github.com/michaelliao/learngit，创建一个`your-github-id.txt`的文本文件，写点自己学习Git的心得，然后推送一个pull</a> request给我，我会视心情而定是否接受。</p><hr><h2 id="八-总结">八 总结</h2><h3 id="1-常规步骤">1. 常规步骤:</h3><ol><li><p>创建本地仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>远程仓库</p><ol><li>关联版本库</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin  git@gitee.com:gyjiang/NS3LoadBalance.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>将本地仓库添加至暂存区</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>推送</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span class="token operator">!</span><span class="token punctuation">[</span>git<span class="token punctuation">]</span><span class="token punctuation">(</span>https://gitee.com/jgyong/blogimg/raw/master/img/202302191537138.png<span class="token punctuation">)</span><span class="token comment">### 2 便捷方式</span><span class="token number">1</span>.    将add与commit合并<span class="token punctuation">[</span>^2<span class="token punctuation">]</span>一般流程```bash<span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token comment"># 将文件添加到暂存区</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Commit Message"</span> <span class="token comment"># 将暂存区的文件提交到本地仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>合并语句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">"Commit Message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="九-出现的问题以及解决方法">九 出现的问题以及解决方法</h2><h3 id="1-“ssh-connect-to-host-github-com-port-22-Connection-timed-out”">1 “ssh:connect to host <a href="http://github.com">github.com</a> port 22: Connection timed out”</h3><p>方法思路：更换端口（参考[^1]）</p><ol><li><p>进入~/.ssh</p></li><li><p>修改config文件</p></li><li><p>编辑文件内容</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">Host github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443Host gitlab.comHostname altssh.gitlab.comUser gitPort 443PreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>保存退出</p></li><li><p>检查是否成功</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="参考链接">参考链接</h2><p>[^1]:<a href="https://blog.csdn.net/weixin_45637036/article/details/106560217">Git问题：解决“ssh:connect to host github.com port 22: Connection timed out”</a><br>[^2]: <a href="https://geek-docs.com/git/git-questions/466_git_git_add_and_commit_in_one_command.html">Git 如何在Git中使用一条命令同时进行add和commit操作</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UCOM会议</title>
      <link href="/2023/07/13/ucom-hui-yi/ucom-hui-yi/"/>
      <url>/2023/07/13/ucom-hui-yi/ucom-hui-yi/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/07/13/ucom-hui-yi/ucom-hui-yi/1111.png" alt="会议合影"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个性化博客搭建记录</title>
      <link href="/2023/07/04/bo-ke/wo-de-di-yi-pian-bo-ke-wen-zhang/"/>
      <url>/2023/07/04/bo-ke/wo-de-di-yi-pian-bo-ke-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1>个性化博客搭建记录</h1><h2 id="1-介绍">1 介绍</h2><p>本文博客主要使用matery主题。主题的网址为<a href="https://blinkfox.github.io/">https://blinkfox.github.io/</a></p><p>关于该博客的主要介绍参见链接<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</a></p><h2 id="2-主题优化">2 主题优化</h2><h3 id="1-添加二次元">1. 添加二次元</h3><p><img src="https://gitee.com/jgyong/blogimg/raw/master/img/202402081748225.png" alt="image-20240208174736869"></p><p>由于过了太长时间，怎么添加二次元插件，相关资料没有整理，待以后有时间再添加</p><h3 id="2-不蒜子统计">2. 不蒜子统计</h3><p>二次元插件与不蒜子出现冲突，没有找到解决冲突的方式。</p><p>我的首选项是关闭不蒜子统计</p><p>方式参见链接1中不蒜子统计部分</p><h2 id="相关链接">相关链接</h2><ol><li><a href="https://liuruibin.com/posts/64eb/">Matery优化二</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 心路历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
